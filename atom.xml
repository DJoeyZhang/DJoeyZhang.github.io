<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>权译&#39;s  Blog</title>
  
  <subtitle>记录生活点点滴滴</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://github.com/DJoeyZhang/"/>
  <updated>2020-08-20T16:52:38.307Z</updated>
  <id>https://github.com/DJoeyZhang/</id>
  
  <author>
    <name>权译</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>一起来找茬开发手记。cocos creator入坑之路</title>
    <link href="https://github.com/DJoeyZhang/archives/8434bd43.html"/>
    <id>https://github.com/DJoeyZhang/archives/8434bd43.html</id>
    <published>2020-08-20T16:10:53.000Z</published>
    <updated>2020-08-20T16:52:38.307Z</updated>
    
    <content type="html"><![CDATA[<p>要睡了,先随便记点，有空再整理。<br><a id="more"></a></p><p>0、关于上次讨论热区配置问题：解决方案如上图<br>    设图片width，height均为1.<br>    左上角建立坐标系，x1,x2,y1,y2分别为x轴坐标/width，y轴坐标/height的比例值。<br>    x1,x2,y1,y2 in (0,1)</p><pre><code>给出配置文件数据结构形如：{url:&quot;www.picture.com&quot;,hotArea:[    {x1:0.5,x2:0.75,y1:0.25,y2:0.5},    ...]如此运营每次设置好热区后，只需要计算一下这四个数就可以了，比切九宫格简单。配置像素值不可取，因图片在前端展示可能会压缩，且按照dip、pt或者rem适配，在不同设备上，px值应该不一样。</code></pre><p>}</p><p>1、关于前端技术选型：</p><pre><code>抖音小游戏支持的主流2种引擎：Cocos Creator,Egret白鹭其中egret引擎文档已经上次更新已经是16年。抛弃。经技术社区调研，CC具备以下优点：version 2.4.2 support了字节小游戏以及字节小游戏开放域的构建发布。引擎侵入性很小，可在字节开发者工具中进行产物二次开发。ES6/7语法，JS栈亲和。API覆盖全面，文档详细。综上，前端决定选用CC引擎。</code></pre><p>2、关于游戏服务端调研：</p><pre><code>浏览多个技术社区和逼乎专栏，多数推荐网易LeanCloud作为游戏服务的后端支持。LeanCloud提供了详细的多人在线游戏server解决方案。部署和运维看起来也挺方便的。收费看着也还行，官网丢出来供服务端大佬参考：https://leancloud.cn/docs/multiplayer-server.html#hash1086233181</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;要睡了,先随便记点，有空再整理。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>杂项(记一些遇到的问题)</title>
    <link href="https://github.com/DJoeyZhang/archives/a96b87af.html"/>
    <id>https://github.com/DJoeyZhang/archives/a96b87af.html</id>
    <published>2020-08-20T15:30:37.000Z</published>
    <updated>2020-08-20T15:31:31.491Z</updated>
    
    <content type="html"><![CDATA[<p>这里记录一些工作遇到的问题，和平时的一些思考。<br><a id="more"></a><br>1、MacBook brew update 慢的问题。<br><a href="https://www.jianshu.com/p/edfe9af41117" target="_blank" rel="noopener">https://www.jianshu.com/p/edfe9af41117</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这里记录一些工作遇到的问题，和平时的一些思考。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Kotlin开发编码规范</title>
    <link href="https://github.com/DJoeyZhang/archives/10213c17.html"/>
    <id>https://github.com/DJoeyZhang/archives/10213c17.html</id>
    <published>2020-07-28T02:00:04.000Z</published>
    <updated>2020-07-28T03:41:49.657Z</updated>
    
    <content type="html"><![CDATA[<p></p><h4>Preface:</h4><br>众所周知，Android团队已经接纳Kotlin为其平台性开发语言，可以预见将来会有越来越多的Android项目用Kotlin写成。随着Kotlin被引入到不同的开发团队，与其相关的代码规范也会越来越受关注。<br><a id="more"></a><br>以下是我查找多方资料初步整理的kotlin编码规范，如有不妥，敬请斧正。<p></p><p></p><h5>命名格式</h5><br>总体来说，Kotlin命名格式要和Java命名规范保持一致，因为Kotlin也是JVM兼容的语言。<p></p><p></p><h5>包名</h5><br>包的命名规则和Java一样：全小写，当遇到多个词连接的场景，不要使用下划线(_)和连字号(-)。<p></p><p><b>推荐</b><br><br>package vn.asiantech.android<br><br><b>不推荐</b><br><br>package Vn.Asiantech.Android</p><p></p><h5>类和接口</h5><br>命名遵守大驼峰规则（首字母大写）。<p></p><p><b>推荐</b><br><br>HomeActivity<br><br>MainFragment<br></p><p></p><h5>方法</h5><br>命名遵守小驼峰规则（首字母小写）。<p></p><p><b>推荐</b><br><br>setData<br><br>getApiNews</p><p></p><h5>字段（Fields）</h5><br>总体来说，字段命名遵守小驼峰规则，不建议使用匈牙利法。<p></p><p><b>推荐</b><br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">class MyClass &#123;</span><br><span class="line">  var publicField: Int = 0</span><br><span class="line">  val person = Person()</span><br><span class="line">  private var privateField: Int?</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>而伴生对象中的常量定义要遵守规则：全大写，单词连接使用下划线。<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">companion object &#123;</span><br><span class="line">  const val THE_ANSWER = 42</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="变量和参数"><a href="#变量和参数" class="headerlink" title="变量和参数"></a>变量和参数</h5><p>一句话概括： 小驼峰命名法。<br><br>不建议使用单个字符的变量，除非是循环中的临时变量。</p><h5 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h5><p>首字母缩略词作为完整单词看待，适时选择命名规则。</p><p><b>推荐</b><br><br>XMLHTTPRequest<br><br>URL: String? <br><br>findPostByID<br><br><b>不推荐</b><br><br>XmlHttpRequest<br><br>url: String<br><br>findPostById<br></p><h5 id="间距"><a href="#间距" class="headerlink" title="间距"></a>间距</h5><p><b>缩进</b><br><br>缩进使用4个空格，不建议使用tabs - 制表符。</p><p><b>闭包</b><br><br>闭包的缩进使用2个空格，</p><p><b>推荐</b><br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for (i in 0..9) &#123;</span><br><span class="line">  Log.i(TAG, &quot;index=&quot; + i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><b>不推荐</b><br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for (i in 0..9) &#123;</span><br><span class="line">    Log.i(TAG, &quot;index=&quot; + i);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h5 id="自动换行"><a href="#自动换行" class="headerlink" title="自动换行"></a>自动换行</h5><p>新的换行缩进使用4个空格，而不是默认的8个。</p><p><b>推荐</b><br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">val widget: CoolUiWidget =</span><br><span class="line">    someIncrediblyLongExpression(that, reallyWouldNotFit, on, aSingle, line)</span><br></pre></td></tr></table></figure></p><p><b>不推荐</b><br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">val widget: CoolUiWidget =</span><br><span class="line">        someIncrediblyLongExpression(that, reallyWouldNotFit, on, aSingle, line)</span><br></pre></td></tr></table></figure></p><h5 id="换行"><a href="#换行" class="headerlink" title="换行"></a>换行</h5><p>每行不应超过130个字符，这在Android Studio内可以配置。<br><br>如果单行代码超过限制需要换行显示，使用, / : / { , = 作为首行的结尾。<br><br><b>推荐</b><br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fun setData(name: String, age: Int, class: String, date: String, message: String,</span><br><span class="line">     time: String) &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fun getInfo(name: String, birth: String, age: Int, weight: Float, hight: Float) =</span><br><span class="line">   getInfo().apply &#123;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">data class Animal(private val weight: Float, private val hight: Float) :</span><br><span class="line">         AbstractAnimal() &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="垂直间距"><a href="#垂直间距" class="headerlink" title="垂直间距"></a>垂直间距</h5><p>方法体之间保留一个空行，这样可以让结构清晰。<br><br>方法体内的空行用来分割不同功能，这样如果一个方法内分多个部分，也许需要重构代码了。<br></p><h5 id="冒号"><a href="#冒号" class="headerlink" title="冒号"></a>冒号</h5><p>类型和父类型之间的冒号前面要保留空格，而变量和类型之间的冒号前没有空格。<br><br><b>推荐</b><br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">interface Foo&lt;out T : Any&gt; : Bar &#123;</span><br><span class="line">    fun foo(a: Int): T</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 申明变量类型</span><br><span class="line"></span><br><span class="line">val firstName: String</span><br></pre></td></tr></table></figure></p><p><b>不推荐</b><br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">interface Foo&lt;out T:Any&gt;: Bar &#123;</span><br><span class="line">    fun foo(a : Int):T</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 申明变量类型</span><br><span class="line"></span><br><span class="line">val firstName:String</span><br></pre></td></tr></table></figure></p><h5 id="结构体"><a href="#结构体" class="headerlink" title="结构体"></a>结构体</h5><p>在定义类的时候，在结构体的右括号和类主题的左括号之间保留空格，结构体的每个参数单行显示。<br><b>推荐</b><br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">class User(</span><br><span class="line">    public open var firstName: String,</span><br><span class="line">    public open var lastName: String</span><br><span class="line">) &#123;&#125;</span><br></pre></td></tr></table></figure></p><p><b>不推荐</b><br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">class User(public open var firstName: String, public open var lastName: String)&#123;&#125;</span><br></pre></td></tr></table></figure></p><p>在定义子类或实现接口的时候，上面提到的规则仍然适用，且冒号和父类名之间要保留空格，冒号和结构体之间不需要空格。<br><br><b>推荐</b><br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">class User(</span><br><span class="line">    public open var firstName: String,</span><br><span class="line">    public open var lastName: String</span><br><span class="line">): RealmObject() &#123;&#125;</span><br></pre></td></tr></table></figure></p><h5 id="分号（-）"><a href="#分号（-）" class="headerlink" title="分号（;）"></a>分号（;）</h5><p>在Kotlin中避免使用分号。</p><p><b>推荐</b><br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">val horseGiftedByTrojans = true</span><br><span class="line">if (horseGiftedByTrojans) &#123;</span><br><span class="line">  bringHorseIntoWalledCity()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><b>不推荐</b><br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">val horseGiftedByTrojans = true;</span><br><span class="line">if (horseGiftedByTrojans) &#123;</span><br><span class="line">  bringHorseIntoWalledCity();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h5 id="括号格式"><a href="#括号格式" class="headerlink" title="括号格式"></a>括号格式</h5><p>方法体的大括号和其他大括号首括号和前面代码在同一行，尾括号新起一行。<br><br><b>推荐</b><br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">class MyClass &#123;</span><br><span class="line">  fun doSomething() &#123;</span><br><span class="line">    if (someTest) &#123;</span><br><span class="line">      // ...</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">      // ...</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><b>不推荐</b><br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">class MyClass</span><br><span class="line">&#123;</span><br><span class="line">  fun doSomething()</span><br><span class="line">  &#123;</span><br><span class="line">    if (someTest)</span><br><span class="line">    &#123;</span><br><span class="line">      // ...</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">      // ...</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h5 id="括号格式-1"><a href="#括号格式-1" class="headerlink" title="括号格式"></a>括号格式</h5><p>条件判断语句必须内嵌在括号里，无论其是多少行。<br><br><b>推荐</b><br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if (someTest) &#123;</span><br><span class="line">  doSomething()</span><br><span class="line">&#125;</span><br><span class="line">if (someTest) &#123; doSomethingElse() &#125;</span><br></pre></td></tr></table></figure></p><p><b>不推荐</b><br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if (someTest)</span><br><span class="line">  doSomething()</span><br><span class="line">if (someTest) doSomethingElse()</span><br></pre></td></tr></table></figure></p><h5 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h5><p>尽可能使用Kotlin原生类型。</p><h5 id="Unit"><a href="#Unit" class="headerlink" title="Unit"></a>Unit</h5><p>避免显式地声明Unit类型，因为不显式声明返回类型的函数都会返回 Unit 类型。<br></p><p><b>推荐</b><br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fun doSomething()</span><br></pre></td></tr></table></figure></p><p>不推荐<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fun doSomething(): Unit</span><br></pre></td></tr></table></figure></p><h5 id="类型推导"><a href="#类型推导" class="headerlink" title="类型推导"></a>类型推导</h5><p>优先使用类型推导。（对编译速度有少许影响？）<br></p><p><b>推荐</b><br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">val something = MyType()</span><br><span class="line">val meaningOfLife = 42</span><br></pre></td></tr></table></figure></p><p><b>不推荐</b><br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">val something: MyType = MyType()</span><br><span class="line">val meaningOfLife: Int = 42</span><br></pre></td></tr></table></figure></p><h5 id="常量-vs-变量"><a href="#常量-vs-变量" class="headerlink" title="常量 vs 变量"></a>常量 vs 变量</h5><p>定义常量时使用关键词val， 定义变量时使用关键词var。<br><br>建议： 把所有的值使用val定义，且只在编译器警告的时候修订为var。</p><h5 id="伴生对象"><a href="#伴生对象" class="headerlink" title="伴生对象"></a>伴生对象</h5><p>伴生对象应定义在类文件的上面，而关于伴生对象的命名规范要遵守Java标准规范。<br></p><p><b>推荐</b><br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">class MainFragment: Fragment() &#123;</span><br><span class="line">    companion object &#123;</span><br><span class="line">        const val TYPE_VIEW_HEADER = 0</span><br><span class="line">        const val TYPE_VIEW_FOOTER = 1</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><b>不推荐</b><br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">class MainFragment: Fragment() &#123;</span><br><span class="line">    companion object &#123;</span><br><span class="line">        val TypeViewHeader = 0</span><br><span class="line">        val TypeViewFooter = 1</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h5 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h5><p>推荐使用字符串插值语法糖。<br></p><p><b>推荐</b><br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">val fullName = &quot;$&#123;user.firstName&#125; $&#123;user.lastName&#125;&quot;</span><br></pre></td></tr></table></figure></p><p><b>不推荐</b><br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">val fullName = user.firstName + &quot; &quot; + user.lastName</span><br></pre></td></tr></table></figure></p><h5 id="选配型（-）"><a href="#选配型（-）" class="headerlink" title="选配型（?）"></a>选配型（?）</h5><p>变量和方法返回可以声明为选配型，这种情况赋值null也是允许的。<br></p><p>使用隐式拆包!!时候要小心，只能在确认实例对象在被使用前已经初始化，如在Activity方法onCreate使用的子视图。<br></p><p>在为选配型变量和参数命名的时候，不用使用类maybeView 和 optionalString的名称，因为选配类型已经表明了这一点。<br></p><p>在访问选配型变量值时，可使用可选链（Optional Chaining）。<br></p><p><b>eg:editText?.setText(“foo”)</b></p><h5 id="习惯"><a href="#习惯" class="headerlink" title="习惯"></a>习惯</h5><p>使用IDE提示<br><br><b>推荐</b><br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">val array = ArrayList&lt;Int&gt;()</span><br><span class="line">array[0]</span><br><span class="line"></span><br><span class="line">// or</span><br><span class="line"></span><br><span class="line">activity().finish()</span><br></pre></td></tr></table></figure></p><p><b>不推荐</b><br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">val array = ArrayList&lt;Int&gt;()</span><br><span class="line">array.get(0)</span><br><span class="line"></span><br><span class="line">// or</span><br><span class="line"></span><br><span class="line">getActivity().finish()</span><br></pre></td></tr></table></figure></p><p>it 在 Lambda 语句中适应较广范围。<br><br><b>推荐</b><br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123; </span><br><span class="line">  it?.let &#123; animal -&gt; animal.foo() &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><b>不推荐</b><br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123; animal -&gt; </span><br><span class="line">  animal?.let &#123; it.foo() &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h5 id="使用类型推断，除非是难以理解的时候。"><a href="#使用类型推断，除非是难以理解的时候。" class="headerlink" title="使用类型推断，除非是难以理解的时候。"></a>使用类型推断，除非是难以理解的时候。</h5><p><b>推荐</b><br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//属性</span><br><span class="line">val age = 0       // Int</span><br><span class="line">val foo = 10L     // Long</span><br><span class="line">val height = 100f // Float</span><br><span class="line"></span><br><span class="line">//函数</span><br><span class="line">// return Boolean</span><br><span class="line">fun Context.isConnectToWifi() =</span><br><span class="line">      (getSystemService(Context.CONNECTIVITY_SERVICE) as ConnectivityManager)</span><br><span class="line">         .activeNetworkInfo?.type == ConnectivityManager.TYPE_WIFI</span><br><span class="line"></span><br><span class="line">// return Point</span><br><span class="line">fun Display.getSize(): Point = Point().apply &#123; getSize(this) &#125;</span><br></pre></td></tr></table></figure></p><h5 id="不要显式地写for循环。"><a href="#不要显式地写for循环。" class="headerlink" title="不要显式地写for循环。"></a>不要显式地写for循环。</h5><p>Kotlin中集合的支持forEach遍历。<br></p><p><b>推荐</b><br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">(0..9).forEach &#123;</span><br><span class="line">// todo somethings</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">(0..9).forEachIndexed &#123; index, value -&gt;</span><br><span class="line">// todo somethings</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><b>不推荐</b><br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for (i in 0..9) &#123;</span><br><span class="line">  // todo somethings</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h5 id="使用-to-快速创建Pair类的实例。"><a href="#使用-to-快速创建Pair类的实例。" class="headerlink" title="使用 to 快速创建Pair类的实例。"></a>使用 to 快速创建Pair类的实例。</h5><p><b>推荐</b><br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">val pair = Pair(foo, bar)</span><br></pre></td></tr></table></figure></p><p><b>不推荐</b><br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">val pair = foo to bar</span><br></pre></td></tr></table></figure></p><h5 id="使用优雅的类型转换。"><a href="#使用优雅的类型转换。" class="headerlink" title="使用优雅的类型转换。"></a>使用优雅的类型转换。</h5><p><b>推荐</b><br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dog as? Animal ?: throw IllegalArgumentException(&quot;not Animal!&quot;)</span><br><span class="line">dog.foo()</span><br></pre></td></tr></table></figure></p><p><b>不推荐</b><br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if (dog !is Animal) &#123;</span><br><span class="line">    throw IllegalArgumentException(&quot;not Animal!&quot;)</span><br><span class="line">&#125;</span><br><span class="line">dog.foo()</span><br></pre></td></tr></table></figure></p><h5 id="Getters-amp-Setters"><a href="#Getters-amp-Setters" class="headerlink" title="Getters &amp; Setters"></a>Getters &amp; Setters</h5><p> Kotlin中推荐直接访问属性。<br></p><p><b>推荐</b><br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// syntax</span><br><span class="line">var &lt;propertyName&gt;[: &lt;PropertyType&gt;] [= &lt;property_initializer&gt;]</span><br><span class="line">    [&lt;getter&gt;]</span><br><span class="line">    [&lt;setter&gt;]</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 自定义setter</span><br><span class="line">var stringRepresentation: String</span><br><span class="line">    get() = this.toString()</span><br><span class="line">    set(value) &#123;</span><br><span class="line">        setDataFromString(value) // parses the string and assigns values to other properties</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h5 id="When语句"><a href="#When语句" class="headerlink" title="When语句"></a>When语句</h5><p>Kotlin的When语句和Java中的Switch有稍许区别，如不会fall through。如果不同的case具有相同的处理策略，使用逗号（,）,并且else语句是必须的。<br></p><p><b>推荐</b><br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">when (anInput) &#123;</span><br><span class="line">  1, 2 -&gt; doSomethingForCaseOneOrTwo()</span><br><span class="line">  3 -&gt; doSomethingForCaseThree()</span><br><span class="line">  else -&gt; println(&quot;No case satisfied&quot;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><b>不推荐</b><br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">when (anInput) &#123;</span><br><span class="line">  1 -&gt; doSomethingForCaseOne()</span><br><span class="line">  2 -&gt; doSomethingForCaseOneOrTwo()</span><br><span class="line">  3 -&gt; doSomethingForCaseThree()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h5 id="变量可视性修饰符"><a href="#变量可视性修饰符" class="headerlink" title="变量可视性修饰符"></a>变量可视性修饰符</h5><p>默认修饰符是public，如果没有其他需要可以省略。<br></p><p><b>推荐</b><br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">val wideOpenProperty = 1</span><br><span class="line">private val myOwnPrivateProperty = &quot;private&quot;</span><br></pre></td></tr></table></figure></p><p><b>不推荐</b><br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">public val wideOpenProperty = 1</span><br><span class="line">private val myOwnPrivateProperty = &quot;private&quot;</span><br></pre></td></tr></table></figure></p><h5 id="访问控制修饰符"><a href="#访问控制修饰符" class="headerlink" title="访问控制修饰符"></a>访问控制修饰符</h5><p>对于每个类，方法和成员变量，访问控制修饰符要显示定义清晰。<br></p><h5 id="变量和字段"><a href="#变量和字段" class="headerlink" title="变量和字段"></a>变量和字段</h5><p>单行一个声明。<br></p><p><b>推荐</b><br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">username: String</span><br><span class="line">twitterHandle: String</span><br></pre></td></tr></table></figure></p><h5 id="类"><a href="#类" class="headerlink" title="类"></a>类</h5><p>普遍来说，每一个文件定义一个类，对于适合的场合依然可以使用内部类。<br></p><h5 id="Data-类型对象"><a href="#Data-类型对象" class="headerlink" title="Data 类型对象"></a>Data 类型对象</h5><p>对于简单的数据结构，推荐使用data类。<br></p><p><b>推荐</b><br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data class Person(val name: String)</span><br></pre></td></tr></table></figure></p><p><b>不推荐</b><br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">class Person(val name: String) &#123;</span><br><span class="line">  override fun toString() : String &#123;</span><br><span class="line">    return &quot;Person(name=$name)&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h5 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h5><p>优先使用静态变量，避免使用枚举类，因为内存开销太大。<br><br>如果枚举类没有其他方法，不用换行。<br></p><p><b>推荐</b><br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">private enum CompassDirection &#123; EAST, NORTH, WEST, SOUTH &#125;</span><br></pre></td></tr></table></figure></p><h5 id="注解（Annotations）"><a href="#注解（Annotations）" class="headerlink" title="注解（Annotations）"></a>注解（Annotations）</h5><p>使用Java式标准注解，特别是override， 关键字要和函数的声明保持同一行。<br></p><p><b>推荐</b><br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">override fun onCreate(savedInstanceState: Bundle?) &#123;</span><br><span class="line">  super.onCreate(savedInstanceState);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><b>不推荐</b><br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">fun onCreate(savedInstanceState: Bundle?) &#123;</span><br><span class="line">  super.onCreate(savedInstanceState);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h5 id="Annotations应该在类的上面，-内联如果注解类中的字段"><a href="#Annotations应该在类的上面，-内联如果注解类中的字段" class="headerlink" title="Annotations应该在类的上面， 内联如果注解类中的字段,"></a>Annotations应该在类的上面， 内联如果注解类中的字段,</h5><p><b>推荐</b><br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@Root(strict=false) </span><br><span class="line">public open class User (</span><br><span class="line">    @field:Element public open var firstName: String? = &quot;&quot;,</span><br><span class="line">    @field:Element public open var lastName: String? = &quot;&quot;,</span><br><span class="line">) &#123;...&#125;</span><br></pre></td></tr></table></figure></p><p><b>不推荐</b><br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Root(strict=false) public open class User (</span><br><span class="line">    @field:Element </span><br><span class="line">    public open var firstName: String? = &quot;&quot;,</span><br><span class="line">    @field:Element </span><br><span class="line">    public open var lastName: String? = &quot;&quot;,</span><br><span class="line">) &#123;...&#125;</span><br></pre></td></tr></table></figure></p><h5 id="XML"><a href="#XML" class="headerlink" title="XML"></a>XML</h5><p>XML文件命名<br><br>文件名要以展示视图的类型作为前缀。<br></p><p><b>推荐</b><br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">activity_login.xml</span><br><span class="line">fragment_main_screen.xml</span><br><span class="line">button_rounded_edges.xml</span><br></pre></td></tr></table></figure></p><p><b>不推荐</b><br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">login.xml</span><br><span class="line">main_screen.xml</span><br><span class="line">rounded_edges_button.xml</span><br></pre></td></tr></table></figure></p><h5 id="缩进"><a href="#缩进" class="headerlink" title="缩进"></a>缩进</h5><p>和Java一样， XML文件使用2个字符缩进。<br></p><p>使用上下文相关的XML<br><br>任何时候，XML都要定义在相关的文件内。<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Strings =&gt; res/values/strings.xml</span><br><span class="line">Styles =&gt; res/values/styles.xml</span><br><span class="line">Colors =&gt; res/color/colors.xml</span><br><span class="line">Animations =&gt; res/anim/</span><br><span class="line">Drawable =&gt; res/drawable</span><br></pre></td></tr></table></figure><h4 id="summary"><a href="#summary" class="headerlink" title="summary"></a>summary</h4><p>我配置的一个Formatter Config,个人感觉比较好用，如有优化，欢迎PR:<br><br><a href="https://github.com/DJoeyZhang/FormatterSetting.gitt">Formatter传送门</a><br><br>参考资料：<br><br><a href="https://kotlinlang.org/docs/reference/properties.html" target="_blank" rel="noopener">kotlin官方文档</a><br></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;/p&gt;&lt;h4&gt;Preface:&lt;/h4&gt;&lt;br&gt;众所周知，Android团队已经接纳Kotlin为其平台性开发语言，可以预见将来会有越来越多的Android项目用Kotlin写成。随着Kotlin被引入到不同的开发团队，与其相关的代码规范也会越来越受关注。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Thread.sleep(0)</title>
    <link href="https://github.com/DJoeyZhang/archives/a239bad0.html"/>
    <id>https://github.com/DJoeyZhang/archives/a239bad0.html</id>
    <published>2020-06-10T01:42:03.000Z</published>
    <updated>2020-06-11T06:54:47.185Z</updated>
    
    <content type="html"><![CDATA[<h4 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h4><p>我们可能经常会用到 Thread.Sleep 函数来吧使线程挂起一段时间。那么你有没有正确的理解这个函数的用法呢？<br></p><h6 id="思考下面这两个问题："><a href="#思考下面这两个问题：" class="headerlink" title="思考下面这两个问题："></a>思考下面这两个问题：<br></h6><p>假设现在是 2020-05-24 12:00:00.000，如果我调用一下 Thread.Sleep(1000) ，在 2020-05-24 12:00:01.000 的时候，这个线程会不会被唤醒？<br><br>某人的代码中用了一句看似莫明其妙的话：Thread.Sleep(0) 。<br><br>既然是 Sleep 0 毫秒，那么他跟去掉这句代码相比，有啥区别么？<br><br><a id="more"></a><br>我们先回顾一下操作系统原理<br><br>操作系统中，CPU竞争有很多种策略。<br>Unix系统使用的是时间片算法，而Windows则属于抢占式的。在时间片算法中，所有的进程排成一个队列。操作系统按照他们的顺序，给每个进程分配一段时间，即该进程允许运行的时间。如果在时间片结束时进程还在运行，则CPU将被剥夺并分配给另一个进程。如果进程在时间片结束前阻塞或结束，则CPU当即进行切换。调度程序所要做的就是维护一张就绪进程列表，当进程用完它的时间片后，它被移到队列的末尾。<br><br>所谓抢占式操作系统，就是说如果一个进程得到了 CPU 时间，除非它自己放弃使用 CPU ，否则将完全霸占 CPU 。因此可以看出，在抢 占式操作系统中，操作系统假设所有的进程都是“人品很好”的，会主动退出 CPU 。<br><br>在抢占式操作系统中，假设有若干进程，操作系统会根据他们的优先级、饥饿时间（已经多长时间没有使用过 CPU 了），给他们算出一个总的优先级来。操作系统就会把 CPU 交给总优先级最高的这个进程。当进程执行完毕或者自己主动挂起后，操作系统就会重新计算一 次所有进程的总优先级，然后再挑一个优先级最高的把 CPU 控制权交给他。<br><br>Sleep函数就是告诉操作系统“在未来的多少毫秒内我不参与CPU竞争”。<br><br>对于第一个问题，答案是：不一定。因为你只是告诉操作系统：在未来的1000毫秒内我不想再参与到CPU竞争。那么1000毫秒过去之后，这时候也许另外一个线程正在使用CPU，那么这时候操作系统是不会重新分配CPU的，直到那个线程挂起或结束；况且，即使这个时候恰巧轮到操作系统进行CPU 分配，那么当前线程也不一定就是总优先级最高的那个，CPU还是可能被其他线程抢占去。<br><br>与此相似的，Thread有个Resume函数，是用来唤醒挂起的线程的。好像上面所说的一样，这个函数只是“告诉操作系统我从现在起开始参与CPU竞争了”，这个函数的调用并不能马上使得这个线程获得CPU控制权。<br><br>对于第二个问题，答案是：有，而且区别很明显。Thread.Sleep(0)的作用，就是“触发操作系统立刻重新进行一次CPU竞争”。竞争的结果也许是当前线程仍然获得CPU控制权，也许会换成别的线程获得CPU控制权。这也是我们在大循环里面经常会写一句Thread.Sleep(0) ，因为这样就给了其他线程比如Paint线程获得CPU控制权的权力，这样界面就不会假死在那里。<br><br>另外，虽然上面提到说“除非它自己放弃使用 CPU ，否则将完全霸占 CPU”，但这个行为仍然是受到制约的——操作系统会监控你霸占CPU的情况，如果发现某个线程长时间霸占CPU，会强制使这个线程挂起，因此在实际上不会出现“一个线程一直霸占着 CPU 不放”的情况。至于我们的大循环造成程序假死，并不是因为这个线程一直在霸占着CPU。实际上在这段时间操作系统已经进行过多次CPU竞争了，只不过其他线程在获得CPU控制权之后很短时间内马上就退出了，于是就又轮到了这个线程继续执行循环，于是就又用了很久才被操作系统强制挂起。。。因此反应到界面上，看起来就好像这个线程一直在霸占着CPU一样。</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h4&gt;&lt;p&gt;我们可能经常会用到 Thread.Sleep 函数来吧使线程挂起一段时间。那么你有没有正确的理解这个函数的用法呢？&lt;br&gt;&lt;/p&gt;
&lt;h6 id=&quot;思考下面这两个问题：&quot;&gt;&lt;a href=&quot;#思考下面这两个问题：&quot; class=&quot;headerlink&quot; title=&quot;思考下面这两个问题：&quot;&gt;&lt;/a&gt;思考下面这两个问题：&lt;br&gt;&lt;/h6&gt;&lt;p&gt;假设现在是 2020-05-24 12:00:00.000，如果我调用一下 Thread.Sleep(1000) ，在 2020-05-24 12:00:01.000 的时候，这个线程会不会被唤醒？&lt;br&gt;&lt;br&gt;某人的代码中用了一句看似莫明其妙的话：Thread.Sleep(0) 。&lt;br&gt;&lt;br&gt;既然是 Sleep 0 毫秒，那么他跟去掉这句代码相比，有啥区别么？&lt;br&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Flutter常用命令行（持续更新）</title>
    <link href="https://github.com/DJoeyZhang/archives/148810a7.html"/>
    <id>https://github.com/DJoeyZhang/archives/148810a7.html</id>
    <published>2020-04-13T02:05:27.000Z</published>
    <updated>2020-04-13T10:14:08.666Z</updated>
    
    <content type="html"><![CDATA[<p>记录一些flutter开发遇到的问题和一些常用的flutter命令行，方便调试。<br><a id="more"></a></p><p>一、<br><br>flutter    列出所有的命令<br><br>flutter help    查看具体命令的帮助信息<br><br>flutter doctor    查看是否还需要安装其它依赖<br><br>flutter doctor -v    查看详细信息<br><br>flutter channel    查看 Flutter SDK 所有分支<br><br>flutter channel stable    切换分支<br><br>flutter upgrade    升级 Flutter SDK（此命令会同时更新 Flutter SDK 和你的 Flutter 项目依赖包）<br><br>flutter packages get    获取项目所有的依赖包（只更新项目依赖包，不包括 Flutter SDK）<br><br>flutter packages upgrade    获取项目所有依赖包的最新版本（只更新项目依赖包，不包括 Flutter SDK）<br><br>flutter analyze    分析项目代码<br><br>flutter build apk    <br><br>flutter build ios    <br></p><p>二、<br><br>查看Flutter版本<br><br>查看当前版本<br><br>flutter  –version<br><br>查看所有版本<br><br>flutter version<br><br>打印所有命令行用法信息 <br><br>flutter  -h或者flutter  –help<br><br>分析项目的Dart代码。<br><br>flutter  analyze<br><br>Flutter构建命令。<br><br>flutter  build<br><br>列表或开关Flutter通道。<br><br>flutter channel<br><br>删除构建/目录。<br><br>flutter  clean<br><br>配置Flutter设置。<br><br>flutter config<br><br>创建一个新的Flutter项目。<br><br>flutter  create<br><br>列出所有连接的设备。 <br><br>flutter  devices<br><br>展示了有关安装工具的信息。<br><br>flutter doctor<br><br>为当前项目运行Flutter驱动程序测试。<br><br>flutter drive<br><br>格式一个或多个Dart文件。<br><br>flutter format<br><br>在Fuchsia上进行热重载。<br><br>flutter  fuchsia_reload<br><br>显示帮助信息的Flutter。<br><br>flutter help<br><br>在附加设备上安装Flutter应用程序。<br><br>flutter install<br><br>显示用于运行Flutter应用程序的日志输出。<br><br> flutter logs<br><br>命令用于管理Flutter包。<br><br>flutter packages<br><br>填充了Flutter工具的二进制工件缓存。<br><br>flutter  precache<br><br>在附加设备上运行你的Flutter应用程序。<br><br>flutter  run<br><br>从一个连接的设备截图。<br><br>flutter screenshot<br><br>停止在附加设备上的Flutter应用。<br><br>flutter stop<br><br>对当前项目的Flutter单元测试。<br><br>flutter test<br><br>开始并停止跟踪运行的Flutter应用程序。<br><br>flutter trace<br><br>升级你的Flutter副本。<br><br>flutter upgrade<br></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录一些flutter开发遇到的问题和一些常用的flutter命令行，方便调试。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>记一些工具命令行（持续更新）</title>
    <link href="https://github.com/DJoeyZhang/archives/6f45ff58.html"/>
    <id>https://github.com/DJoeyZhang/archives/6f45ff58.html</id>
    <published>2020-03-26T06:53:48.000Z</published>
    <updated>2020-08-20T03:42:09.026Z</updated>
    
    <content type="html"><![CDATA[<h6 id="一、查看本地keystore文件（前提是有keystore的密码）"><a href="#一、查看本地keystore文件（前提是有keystore的密码）" class="headerlink" title="一、查看本地keystore文件（前提是有keystore的密码）"></a>一、查看本地keystore文件（前提是有keystore的密码）</h6><p>命令：keytool -list -v -keystore 目标文件路径<br></p><h6 id="二、查看三方应用或是系统应用签名"><a href="#二、查看三方应用或是系统应用签名" class="headerlink" title="二、查看三方应用或是系统应用签名"></a>二、查看三方应用或是系统应用签名</h6><p>右键apk解压，目标文件是META-INF文件夹中的CERT.RSA文件，通过命令keytool.exe命令查看证书信息。可以查看签名的MD5、SHA1、SHA256值及签名算法<br><br>命令：keytool -printcert -file 目标文件路径。</p><h6 id="三、内存检查命令"><a href="#三、内存检查命令" class="headerlink" title="三、内存检查命令:"></a>三、内存检查命令:</h6><p>cd /Users/joey/Library/Android/sdk/platform-tools</p><p>./hprof-conv -z /Users/joey/Desktop/memory/memory-20200819T180839.hprof /Users/joey/Desktop/me.hprof</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h6 id=&quot;一、查看本地keystore文件（前提是有keystore的密码）&quot;&gt;&lt;a href=&quot;#一、查看本地keystore文件（前提是有keystore的密码）&quot; class=&quot;headerlink&quot; title=&quot;一、查看本地keystore文件（前提是有keyst
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>记录一些不错的博文(持续更新)</title>
    <link href="https://github.com/DJoeyZhang/archives/d68ca116.html"/>
    <id>https://github.com/DJoeyZhang/archives/d68ca116.html</id>
    <published>2020-03-07T15:06:00.000Z</published>
    <updated>2020-07-29T09:41:03.573Z</updated>
    
    <content type="html"><![CDATA[<p>博文而强识，温故而知新。这里记录一些平时看到的不错的文章。<br><br><a id="more"></a></p><p>1、关于Android Sqlite操作的文章，介绍的是Google官方的ROOM库，最近正好在做一个通讯录的需求用到。<br><br>Blog:<a href="https://www.jianshu.com/p/72c8efc3ad87" target="_blank" rel="noopener">https://www.jianshu.com/p/72c8efc3ad87</a><br>github:<a href="https://github.com/HoldMyOwn/RoomDemo">https://github.com/HoldMyOwn/RoomDemo</a><br>ROOM官方：<a href="https://developer.android.google.cn/jetpack/androidx/releases/room" target="_blank" rel="noopener">https://developer.android.google.cn/jetpack/androidx/releases/room</a></p><p>2、关于android应用静默升级，差分包前后端部署实现Blog:<a href="https://www.jianshu.com/p/058fd24bb2da" target="_blank" rel="noopener">https://www.jianshu.com/p/058fd24bb2da</a><br>github:<a href="https://github.com/itlwy/AppSmartUpdate">https://github.com/itlwy/AppSmartUpdate</a></p><p>3、关于OKhttp拦截器搭配retrofit使用<br>BLOG:<a href="https://www.jianshu.com/p/62ab11ddacc8" target="_blank" rel="noopener">https://www.jianshu.com/p/62ab11ddacc8</a></p><p>4、关于Room使用多表查询，建立关系型数据库<br><a href="https://www.jianshu.com/p/c7517ea16d1f" target="_blank" rel="noopener">https://www.jianshu.com/p/c7517ea16d1f</a></p><p>5、关于package.json中依赖版本配置:<br><a href="https://www.jianshu.com/p/e5959bf56844" target="_blank" rel="noopener">https://www.jianshu.com/p/e5959bf56844</a></p><p>6、关于HomeBrew源切换<br><a href="https://www.cnblogs.com/tulintao/p/11134877.html" target="_blank" rel="noopener">https://www.cnblogs.com/tulintao/p/11134877.html</a></p><p>7、关于kotlin携程的阐述<br><a href="https://blog.mindorks.com/mastering-kotlin-coroutines-in-android-step-by-step-guide" target="_blank" rel="noopener">https://blog.mindorks.com/mastering-kotlin-coroutines-in-android-step-by-step-guide</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;博文而强识，温故而知新。这里记录一些平时看到的不错的文章。&lt;br&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="android" scheme="https://github.com/DJoeyZhang/tags/android/"/>
    
      <category term="tools" scheme="https://github.com/DJoeyZhang/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>adb 常用命令（持续更新）</title>
    <link href="https://github.com/DJoeyZhang/archives/40bc90d3.html"/>
    <id>https://github.com/DJoeyZhang/archives/40bc90d3.html</id>
    <published>2020-02-11T10:00:00.000Z</published>
    <updated>2020-08-20T03:41:41.490Z</updated>
    
    <content type="html"><![CDATA[<h5 id="ADB-means-android-debug-bridge-是调试Android设备的桥。开发电视经常需要敲一些adb命令，这里收藏一些常用的ADB命令。"><a href="#ADB-means-android-debug-bridge-是调试Android设备的桥。开发电视经常需要敲一些adb命令，这里收藏一些常用的ADB命令。" class="headerlink" title="ADB means:android debug bridge,是调试Android设备的桥。开发电视经常需要敲一些adb命令，这里收藏一些常用的ADB命令。"></a>ADB means:android debug bridge,是调试Android设备的桥。开发电视经常需要敲一些adb命令，这里收藏一些常用的ADB命令。</h5><a id="more"></a><h5 id="1、http-proxy"><a href="#1、http-proxy" class="headerlink" title="1、http_proxy"></a>1、http_proxy</h5><p><b>设置代理：</b></p><p>adb shell settings put global http_proxy 代理IP地址:端口号</p><p>如：</p><p>adb shell settings put global http_proxy 127.0.0.1:8888</p><p><b>移除代理：</b></p><p>adb shell settings delete global http_proxy</p><p>adb shell settings delete global global_http_proxy_host</p><p>adb shell settings delete global global_http_proxy_port</p><p>adb reboot</p><p>但是，adb shell settings delete global http_proxy，再有些没有delete参数的设备上报错？<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Invalid command: delete</span><br><span class="line"></span><br><span class="line">usage:  settings [--user NUM] get namespace key</span><br><span class="line"></span><br><span class="line">        settings [--user NUM] put namespace key value</span><br><span class="line"></span><br><span class="line">&apos;namespace&apos; is one of &#123;system, secure, global&#125;, case-insensitive</span><br><span class="line"></span><br><span class="line">If &apos;--user NUM&apos; is not given, the operations are performed on the owner user.</span><br></pre></td></tr></table></figure></p><p>解决方法，sqlite中找到settings.db,在数据库中删除代理信息（需要Root）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sqlite3 /data/data/com.android.providers.settings/databases/settings.db</span><br><span class="line">sqlite&gt; select * from global;</span><br><span class="line">sqlite&gt; delete from global where name=&quot;global_http_proxy_host&quot;;</span><br><span class="line">sqlite&gt; delete from global where name=&quot;global_http_proxy_port&quot;;</span><br><span class="line">sqlite&gt; delete from global where name=&quot;http_proxy&quot;;</span><br></pre></td></tr></table></figure></p><p>then adb rebbot</p><p><b>也可以使用第三方apk</b><br><br>AndroidProxySetter工具可以帮助我们使用adb命令可以快速进行wifi代理的设置和清除<br>GitHub地址：</p><p><a href="https://github.com/jpkrause/AndroidProxySetter">https://github.com/jpkrause/AndroidProxySetter</a><br>下好apk后，安装到手机</p><p>adb install proxy-setter-debug-0.2.1.apk</p><p>设置代理：</p><p>adb shell am start -n tk.elevenk.proxysetter/.MainActivity -e host 代理IP地址 -e port 端口号 -e ssid WIFI名称 -e reset-wifi true -e key WIFI密码</p><p>如：</p><p>adb shell am start -n tk.elevenk.proxysetter/.MainActivity -e host 127.0.0.1 -e port 8888 -e ssid YOUR-WIFI-NAME -e reset-wifi true -e key YOUR-WIFI-PASSWORD</p><h5 id="2、安装、卸载应用"><a href="#2、安装、卸载应用" class="headerlink" title="2、安装、卸载应用"></a>2、安装、卸载应用</h5><p><b>安装：</b><br><br>adb install com.xxx.xxx(包名)<br><br><b>卸载：</b><br><br>adb uninstall com.xxx.xxx(包名)</p><h5 id="3、调试应用"><a href="#3、调试应用" class="headerlink" title="3、调试应用"></a>3、调试应用</h5><p><b>抓日志：</b><br><br>adb logcat -v time &gt; ~\logcat.log<br></p><p><b>列出adb连接的设备:</b><br><br>adb devices</p><p><b>PC机连接某个电视盒子设备:</b><br><br>adb connect 192.168.1.19(连接某个设备，192.168.1.19是设备的IP地址，手机测试一般用不到，盒子或者电视设备会用到)</p><p><b>清除安装的APK缓存数据:</b><br><br>adb shell pm clear com.hiveview.tv（包名） <br><br>清除某个apk缓存数据，清空的是 /data/data/包名/ 下的数据，包括数据库文件等</p><p><b>查看APK包名版本信息:</b><br><br>aapt dump badging pc上apk路径地址<br><br>查看某个apk（在Android系统中包名（例如格式：com.hiveview.tv）是唯一标示一个应用的ID）</p><p><b>shell模式:</b><br><br>命令窗口 adb shell 是进入Linux命令模式了，进入此模式之后，ls，cd ,rm 等命令都可用使用了.</p><p><b>把本地文件放到设备端:</b><br><br>adb push D:\file.txt system/        <br><br>file.text是本地文件<br><br>system是设备路径</p><p><b>把设备端文件放置到本地电脑:</b><br><br>adb pull system/file.txt D:/<br><br>system/file.text是设备上的文件<br><br>D:/是本地路径</p><p><b>截屏:</b><br><br>adb shell 进入linux命令模式 <br><br>执行screencap -p /data/app/1.png 截屏，截屏的图片1.png即在/data/app文件夹下了</p><p><b>发送广播的命令:</b><br><br>adb shell am broadcast -a com.android.test –es test_string “this is test string” –ei test_int 100 –ez test_boolean true</p><p>－es 是传递String参数，test_string 参数key    “this is test string” 是参数值</p><p>－ei 是传递int参数，test_int 参数key    10 是参数值 </p><p>－ez 是传递boolean参数，test_boolean 参数key    true是参数值</p><p><b>启动某个activity:</b><br><br>am start -n 包(package)名/包名.活动(activity)名称启动 <br><br>云屏默认设置：am start com.android.settings/.Settings<br><br>后跟 –es 可以传递参数</p><p><b>挂载某个目录:</b><br><br>mount －o remount   /system<br>挂载某个目录，如果命令行提示文件只有读权限，建议执行此命令挂一下此目录</p><p><b>查看内存使用情况:</b><br><br>adb shell  模式下：cat /proc/meminfo <br><br>详情解释:<a href="http://www.jbxue.com/LINUXjishu/9930.html" target="_blank" rel="noopener">http://www.jbxue.com/LINUXjishu/9930.html</a></p><p>MemTotal: 所有可用RAM大小（即物理内存减去一些预留位和内核的二进制代码大小）<br><br>MemFree: LowFree与HighFree的总和，被系统留着未使用的内存<br><br>Buffers: 用来给文件做缓冲大小<br><br>Cached: 被高速缓冲存储器（cache memory）用的内存的大小（等于 diskcache minus SwapCache ）.<br><br>SwapCached:被高速缓冲存储器（cache memory）用的交换空间的大小<br>           已经被交换出来的内存，但仍然被存放在swapfile中。用来在需要的时候很快的被替换而不需要再次打开I/O端口。 <br><br>Active: 在活跃使用中的缓冲或高速缓冲存储器页面文件的大小，除非非常必要否则不会被移作他用.<br><br>Inactive: 在不经常使用中的缓冲或高速缓冲存储器页面文件的大小，可能被用于其他途径.<br><br>HighTotal\HighFree: 该区域不是直接映射到内核空间。内核必须使用不同的手法使用该段内存。<br><br>LowTotal\LowFree: 低位可以达到高位内存一样的作用，而且它还能够被内核用来记录一些自己的数据结构。<br><br>SwapTotal: 交换空间的总大小<br><br>SwapFree: 未被使用交换空间的大小<br><br>Dirty: 等待被写回到磁盘的内存大小。<br><br>Writeback: 正在被写回到磁盘的内存大小。<br><br>AnonPages：未映射页的内存大小<br><br>Mapped: 设备和文件等映射的大小。<br><br>Slab: 内核数据结构缓存的大小，可以减少申请和释放内存带来的消耗。<br><br>SReclaimable:可收回Slab的大小<br><br>SUnreclaim：不可收回Slab的大小（SUnreclaim+SReclaimable＝Slab）<br><br>PageTables：管理内存分页页面的索引表的大小。<br><br>NFS_Unstable:不稳定页表的大小<br><br>VmallocTotal: 可以vmalloc虚拟内存大小<br><br>VmallocUsed: 已经被使用的虚拟内存大小。<br><br>VmallocChunk: largest contigious block of vmalloc area which is free</p><p><b>命令行模拟遥控器按键:</b><br><br>adb shell 进入命令模式下：input keyevent  keycode值 如：</p><p>input keyevent 4 相当于按了返回键</p><p>input keyevent 82 模拟菜单键</p><p>input keyevent 3 主页键</p><p>input keyevent 19 按上键</p><p>input keyevent 20 按下键</p><p>input keyevent 21 按左键</p><p>input keyevent 22 按右键</p><p>input keyevent 23 按确定键</p><p><b>刷ROM命令:</b><br><br>adb connect IP 连接上盒子或者电视，盒子上插上带ROM的U盘，命令窗口输入 </p><p>adb reboot recovery，之后盒子重启会直接读取ROM文件进行刷机了</p><p>串口TTL：pm list packages 查看已安装应用</p>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;ADB-means-android-debug-bridge-是调试Android设备的桥。开发电视经常需要敲一些adb命令，这里收藏一些常用的ADB命令。&quot;&gt;&lt;a href=&quot;#ADB-means-android-debug-bridge-是调试Android设备的桥。开发电视经常需要敲一些adb命令，这里收藏一些常用的ADB命令。&quot; class=&quot;headerlink&quot; title=&quot;ADB means:android debug bridge,是调试Android设备的桥。开发电视经常需要敲一些adb命令，这里收藏一些常用的ADB命令。&quot;&gt;&lt;/a&gt;ADB means:android debug bridge,是调试Android设备的桥。开发电视经常需要敲一些adb命令，这里收藏一些常用的ADB命令。&lt;/h5&gt;
    
    </summary>
    
    
      <category term="android" scheme="https://github.com/DJoeyZhang/tags/android/"/>
    
      <category term="tools" scheme="https://github.com/DJoeyZhang/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>Kotlin学习（六）：Sealed Classes</title>
    <link href="https://github.com/DJoeyZhang/archives/9d59608a.html"/>
    <id>https://github.com/DJoeyZhang/archives/9d59608a.html</id>
    <published>2020-02-04T08:56:00.000Z</published>
    <updated>2020-02-12T03:28:50.147Z</updated>
    
    <content type="html"><![CDATA[<h5 id="何为密封类？"><a href="#何为密封类？" class="headerlink" title="何为密封类？"></a>何为密封类？</h5><p>从文档得知：密封类用于表示受限类层次结构，此时值可以具有来自受限集的类型之一，但不能具有任何其他类型。从某种意义上说，它们是枚举类的扩展：枚举类型的值集也受到限制，但每个枚举常数仅作为单个实例存在，而密封类的子类可以具有多个实例，这些实例可以包含状态。<br><a id="more"></a></p><h5 id="如何声明-sealed-class"><a href="#如何声明-sealed-class" class="headerlink" title="如何声明 sealed class?"></a>如何声明 sealed class?</h5><p>只要在类名前加sealed修饰符。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sealed class Car &#123;</span><br><span class="line"></span><br><span class="line">    data class Maruti(val speed: Int) : Car()</span><br><span class="line">    data class Bugatti(val speed: Int, val boost: Int) : Car()</span><br><span class="line">    object NotACar : Car()</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>当您在when表达式中使用密封类时，使用它们的关键好处就发挥了作用。如果验证语句覆盖所有情况，则不需要向语句中添加else子句。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">fun speed(car: Car): Int = when (car) &#123;</span><br><span class="line">    is Car.Maruti -&gt; car.speed</span><br><span class="line">    is Car.Bugatti -&gt; car.speed + car.boost</span><br><span class="line">    Car.NotACar -&gt; INVALID_SPEED</span><br><span class="line">    // else clause is not required as we&apos;ve covered all the cases</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以，当你遇到类似场景，考虑使用密封类。</p>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;何为密封类？&quot;&gt;&lt;a href=&quot;#何为密封类？&quot; class=&quot;headerlink&quot; title=&quot;何为密封类？&quot;&gt;&lt;/a&gt;何为密封类？&lt;/h5&gt;&lt;p&gt;从文档得知：密封类用于表示受限类层次结构，此时值可以具有来自受限集的类型之一，但不能具有任何其他类型。从某种意义上说，它们是枚举类的扩展：枚举类型的值集也受到限制，但每个枚举常数仅作为单个实例存在，而密封类的子类可以具有多个实例，这些实例可以包含状态。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="android" scheme="https://github.com/DJoeyZhang/tags/android/"/>
    
      <category term="kotlin" scheme="https://github.com/DJoeyZhang/tags/kotlin/"/>
    
  </entry>
  
  <entry>
    <title>Kotlin学习（五）：Extension Functions</title>
    <link href="https://github.com/DJoeyZhang/archives/e32f47f4.html"/>
    <id>https://github.com/DJoeyZhang/archives/e32f47f4.html</id>
    <published>2020-02-04T08:42:00.000Z</published>
    <updated>2020-02-04T08:54:38.723Z</updated>
    
    <content type="html"><![CDATA[<h5 id="拓展函数"><a href="#拓展函数" class="headerlink" title="拓展函数"></a>拓展函数</h5><p>何为拓展函数？</p><p>正如其名称，拓展函数是这样一种函数：它可以帮助你在不触及类代码的情况下，拓展类中函数的功能。这样可以减少不必要的外部代码污染。<br><br>换句话说，在kotlin中，拓展函数允许我们通过添加新函数的方式拓展类的函数种类。被拓展的类不必属于我们（它可以是第三方库中的类）并且也不需要我们写类去集成被拓展的类。<br><br>真的？不需要使用继承！<br><br>是的，这在kotlin中是可以的。<br><br>让我们停止白话，展示一下拓展函数如何使用。<br><br><a id="more"></a><br>举一个非常简单的例子来帮助理解：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">fun Int.triple(): Int &#123;</span><br><span class="line">  return this * 3</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// now we can use like this</span><br><span class="line">var result = 3.triple()</span><br></pre></td></tr></table></figure></p><p>另一个例子，让我们看看拓展函数如何应用在Android的View中。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">fun ImageView.loadImage(url: String) &#123;</span><br><span class="line">    Glide.with(context).load(url).into(this)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// now we can use like this</span><br><span class="line">imageView.loadImage(url)</span><br></pre></td></tr></table></figure></p><p>这看起来棒极了！<br><br>在Android开发中，有很多地方我们都可以使用kotlin的这个很酷的特性。让我合理使用它吧！</p>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;拓展函数&quot;&gt;&lt;a href=&quot;#拓展函数&quot; class=&quot;headerlink&quot; title=&quot;拓展函数&quot;&gt;&lt;/a&gt;拓展函数&lt;/h5&gt;&lt;p&gt;何为拓展函数？&lt;/p&gt;
&lt;p&gt;正如其名称，拓展函数是这样一种函数：它可以帮助你在不触及类代码的情况下，拓展类中函数的功能。这样可以减少不必要的外部代码污染。&lt;br&gt;&lt;br&gt;换句话说，在kotlin中，拓展函数允许我们通过添加新函数的方式拓展类的函数种类。被拓展的类不必属于我们（它可以是第三方库中的类）并且也不需要我们写类去集成被拓展的类。&lt;br&gt;&lt;br&gt;真的？不需要使用继承！&lt;br&gt;&lt;br&gt;是的，这在kotlin中是可以的。&lt;br&gt;&lt;br&gt;让我们停止白话，展示一下拓展函数如何使用。&lt;br&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="android" scheme="https://github.com/DJoeyZhang/tags/android/"/>
    
      <category term="kotlin" scheme="https://github.com/DJoeyZhang/tags/kotlin/"/>
    
  </entry>
  
  <entry>
    <title>Kotlin学习（四）：Destructuring Declarations</title>
    <link href="https://github.com/DJoeyZhang/archives/9105f5af.html"/>
    <id>https://github.com/DJoeyZhang/archives/9105f5af.html</id>
    <published>2020-02-04T03:18:00.000Z</published>
    <updated>2020-02-04T08:41:31.084Z</updated>
    
    <content type="html"><![CDATA[<h5 id="解构声明是kotlin中的一个重要特性。我们可以利用这个特性去更好地编写应用。"><a href="#解构声明是kotlin中的一个重要特性。我们可以利用这个特性去更好地编写应用。" class="headerlink" title="解构声明是kotlin中的一个重要特性。我们可以利用这个特性去更好地编写应用。"></a>解构声明是kotlin中的一个重要特性。我们可以利用这个特性去更好地编写应用。<br></h5><h5 id="什么是解构呢？"><a href="#什么是解构呢？" class="headerlink" title="什么是解构呢？"></a>什么是解构呢？<br></h5><h6 id="解构是一个很方便的方法：用于从一个-数组-或者-数据存储模型（通常是嵌套的模型）中提取多个值。它可以使用在接收数据的位置（如赋值语句的左侧）。"><a href="#解构是一个很方便的方法：用于从一个-数组-或者-数据存储模型（通常是嵌套的模型）中提取多个值。它可以使用在接收数据的位置（如赋值语句的左侧）。" class="headerlink" title="解构是一个很方便的方法：用于从一个 数组 或者 数据存储模型（通常是嵌套的模型）中提取多个值。它可以使用在接收数据的位置（如赋值语句的左侧）。"></a>解构是一个很方便的方法：用于从一个 数组 或者 数据存储模型（通常是嵌套的模型）中提取多个值。它可以使用在接收数据的位置（如赋值语句的左侧）。<br></h6><h6 id="其实在ES6、7的语法中，早已支持解构的写法，这里应该是一个借鉴。"><a href="#其实在ES6、7的语法中，早已支持解构的写法，这里应该是一个借鉴。" class="headerlink" title="其实在ES6、7的语法中，早已支持解构的写法，这里应该是一个借鉴。"></a>其实在ES6、7的语法中，早已支持解构的写法，这里应该是一个借鉴。</h6><a id="more"></a><p>有时，利用解构去获取一个对象中的变量值是很方便的，for example:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">val (name, age) = developer</span><br></pre></td></tr></table></figure></p><p>现在, 我们可以像从前那样单独地使用 name 和 age 字段:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">println(name)</span><br><span class="line">println(age)</span><br></pre></td></tr></table></figure></p><h5 id="我们通常在这些地方会用到解构声明"><a href="#我们通常在这些地方会用到解构声明" class="headerlink" title="我们通常在这些地方会用到解构声明:"></a>我们通常在这些地方会用到解构声明:</h5><ul><li>从一个函数返回两个值</li></ul><h5 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">data class Developer(val name: String, val age: Int)</span><br><span class="line">fun getDeveloper(): Developer &#123;</span><br><span class="line"> // some logic</span><br><span class="line"> return Developer(name, age)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// Now, to use this function:</span><br><span class="line">val (name, age) = getDeveloper()</span><br></pre></td></tr></table></figure><h5 id="在Maps中使用解构声明"><a href="#在Maps中使用解构声明" class="headerlink" title="在Maps中使用解构声明"></a>在Maps中使用解构声明</h5><h5 id="Example-1"><a href="#Example-1" class="headerlink" title="Example"></a>Example</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">for ((key, value) in map) &#123;</span><br><span class="line"> // do something with the key and the value</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以，当需要的时候，使用解构这个特性吧。</p>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;解构声明是kotlin中的一个重要特性。我们可以利用这个特性去更好地编写应用。&quot;&gt;&lt;a href=&quot;#解构声明是kotlin中的一个重要特性。我们可以利用这个特性去更好地编写应用。&quot; class=&quot;headerlink&quot; title=&quot;解构声明是kotlin中的一个重要特性。我们可以利用这个特性去更好地编写应用。&quot;&gt;&lt;/a&gt;解构声明是kotlin中的一个重要特性。我们可以利用这个特性去更好地编写应用。&lt;br&gt;&lt;/h5&gt;&lt;h5 id=&quot;什么是解构呢？&quot;&gt;&lt;a href=&quot;#什么是解构呢？&quot; class=&quot;headerlink&quot; title=&quot;什么是解构呢？&quot;&gt;&lt;/a&gt;什么是解构呢？&lt;br&gt;&lt;/h5&gt;&lt;h6 id=&quot;解构是一个很方便的方法：用于从一个-数组-或者-数据存储模型（通常是嵌套的模型）中提取多个值。它可以使用在接收数据的位置（如赋值语句的左侧）。&quot;&gt;&lt;a href=&quot;#解构是一个很方便的方法：用于从一个-数组-或者-数据存储模型（通常是嵌套的模型）中提取多个值。它可以使用在接收数据的位置（如赋值语句的左侧）。&quot; class=&quot;headerlink&quot; title=&quot;解构是一个很方便的方法：用于从一个 数组 或者 数据存储模型（通常是嵌套的模型）中提取多个值。它可以使用在接收数据的位置（如赋值语句的左侧）。&quot;&gt;&lt;/a&gt;解构是一个很方便的方法：用于从一个 数组 或者 数据存储模型（通常是嵌套的模型）中提取多个值。它可以使用在接收数据的位置（如赋值语句的左侧）。&lt;br&gt;&lt;/h6&gt;&lt;h6 id=&quot;其实在ES6、7的语法中，早已支持解构的写法，这里应该是一个借鉴。&quot;&gt;&lt;a href=&quot;#其实在ES6、7的语法中，早已支持解构的写法，这里应该是一个借鉴。&quot; class=&quot;headerlink&quot; title=&quot;其实在ES6、7的语法中，早已支持解构的写法，这里应该是一个借鉴。&quot;&gt;&lt;/a&gt;其实在ES6、7的语法中，早已支持解构的写法，这里应该是一个借鉴。&lt;/h6&gt;
    
    </summary>
    
    
      <category term="android" scheme="https://github.com/DJoeyZhang/tags/android/"/>
    
      <category term="kotlin" scheme="https://github.com/DJoeyZhang/tags/kotlin/"/>
    
  </entry>
  
  <entry>
    <title>Kotlin学习（三）：Data Class</title>
    <link href="https://github.com/DJoeyZhang/archives/54c86970.html"/>
    <id>https://github.com/DJoeyZhang/archives/54c86970.html</id>
    <published>2020-02-04T02:59:00.000Z</published>
    <updated>2020-02-04T08:41:20.020Z</updated>
    
    <content type="html"><![CDATA[<p>我们经常会需要创建一个这样的类：仅用于承载数据，而无其他作用。这样的类中一些标准函数通常可以从数据中机械性的生成。在kotlin中，这种类叫做data class,被标记为 data。（e.g:java中的bean类与其set，get，toString等方法）。<br><a id="more"></a></p><h6 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h6><h6 id="In-Java"><a href="#In-Java" class="headerlink" title="In Java"></a>In Java</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">public class Developer &#123;</span><br><span class="line"></span><br><span class="line">    private String name;</span><br><span class="line">    private int age;</span><br><span class="line"></span><br><span class="line">    public Developer(String name, int age) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">        this.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getName() &#123;</span><br><span class="line">        return name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setName(String name) &#123;</span><br><span class="line">        this.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public int getAge() &#123;</span><br><span class="line">        return age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setAge(int age) &#123;</span><br><span class="line">        this.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public boolean equals(Object o) &#123;</span><br><span class="line">        if (this == o) return true;</span><br><span class="line">        if (o == null || getClass() != o.getClass()) return false;</span><br><span class="line"></span><br><span class="line">        Developer developer = (Developer) o;</span><br><span class="line"></span><br><span class="line">        if (age != developer.age) return false;</span><br><span class="line">        return name != null ? name.equals(developer.name) : developer.name == null;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public int hashCode() &#123;</span><br><span class="line">        int result = name != null ? name.hashCode() : 0;</span><br><span class="line">        result = 31 * result + age;</span><br><span class="line">        return result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public String toString() &#123;</span><br><span class="line">        return &quot;Developer&#123;&quot; +</span><br><span class="line">                &quot;name=&apos;&quot; + name + &apos;\&apos;&apos; +</span><br><span class="line">                &quot;, age=&quot; + age +</span><br><span class="line">                &apos;&#125;&apos;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="In-Kotlin"><a href="#In-Kotlin" class="headerlink" title="In Kotlin"></a>In Kotlin</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">data class Developer(val name: String, val age: Int)</span><br></pre></td></tr></table></figure><p>当一个类被标记为 data class时，你不需要像Java中那样，去实现或者创建以下这些方法。</p><ul><li>hashCode()</li><li>equals()</li><li>toString()</li><li>copy()</li></ul><p>编译器会自动地创建这些内部关联，所以kotlin同样引领了一个使代码整洁的潮流。<br><br>尽管如此，data class 需要满足的需求很少：</p><ul><li>主构造函数需要至少一个参数。</li><li>所有的主构造函数参数需要被标记为val 或者 var。</li><li>Data Class不能是 abstract, open, sealed or inner这些类别.</li></ul><p>所以，当你遇到这些场景，使用data class吧</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们经常会需要创建一个这样的类：仅用于承载数据，而无其他作用。这样的类中一些标准函数通常可以从数据中机械性的生成。在kotlin中，这种类叫做data class,被标记为 data。（e.g:java中的bean类与其set，get，toString等方法）。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="android" scheme="https://github.com/DJoeyZhang/tags/android/"/>
    
      <category term="kotlin" scheme="https://github.com/DJoeyZhang/tags/kotlin/"/>
    
  </entry>
  
  <entry>
    <title>Kotlin学习（二）：apply vs with</title>
    <link href="https://github.com/DJoeyZhang/archives/8b7dec41.html"/>
    <id>https://github.com/DJoeyZhang/archives/8b7dec41.html</id>
    <published>2020-01-23T09:43:00.000Z</published>
    <updated>2020-02-04T08:41:06.923Z</updated>
    
    <content type="html"><![CDATA[<h5 id="apply-vs-with"><a href="#apply-vs-with" class="headerlink" title="apply vs with"></a>apply vs with</h5><p>Kotlin中有很多优秀的特性，我们可以利用这些特性在Kotlin中编写更好的应用程序。在所有这些特性中，apply和with是重要的特性。我们必须知道什么时候用哪一个。<br><a id="more"></a></p><h5 id="何时使用“apply”，何时使用“with”？"><a href="#何时使用“apply”，何时使用“with”？" class="headerlink" title="何时使用“apply”，何时使用“with”？"></a>何时使用“apply”，何时使用“with”？</h5><p>根据定义，apply接受一个函数，并将其作用域设置为调用apply的对象的作用域。这意味着不需要显式引用对象。Apply（）当然不仅仅是简单地设置属性。它是一个转换函数，能够在返回之前评估复杂的逻辑。最后，函数只返回相同的对象（添加了更改），因此可以在同一行代码中继续使用它。</p><h5 id="让我们看看“apply”和“with”之间的区别。"><a href="#让我们看看“apply”和“with”之间的区别。" class="headerlink" title="让我们看看“apply”和“with”之间的区别。"></a>让我们看看“apply”和“with”之间的区别。</h5><p>主要有两个区别：</p><ul><li>apply接受一个实例作为接收器，而with要求将一个实例作为参数传递。在这两种情况下，实例都将成为一个块内的实例。</li><li>apply返回接收器，with返回其块中最后一个表达式的结果。</li></ul><p>通常在需要对对象执行操作并返回时使用apply。当需要对某个对象执行某些操作并返回可用于的其他对象时。</p><h5 id="Example-of-apply"><a href="#Example-of-apply" class="headerlink" title="Example of apply"></a>Example of apply</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">fun getDeveloper(): Developer &#123;</span><br><span class="line">    return Developer().apply &#123;</span><br><span class="line">        developerName = &quot;Amit Shekhar&quot;</span><br><span class="line">        developerAge = 22</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="Example-of-with"><a href="#Example-of-with" class="headerlink" title="Example of with"></a>Example of with</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">fun getPersonFromDeveloper(developer: Developer): Person &#123;</span><br><span class="line">    return with(developer) &#123;</span><br><span class="line">        Person(developerName, developerAge)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;apply-vs-with&quot;&gt;&lt;a href=&quot;#apply-vs-with&quot; class=&quot;headerlink&quot; title=&quot;apply vs with&quot;&gt;&lt;/a&gt;apply vs with&lt;/h5&gt;&lt;p&gt;Kotlin中有很多优秀的特性，我们可以利用这些特性在Kotlin中编写更好的应用程序。在所有这些特性中，apply和with是重要的特性。我们必须知道什么时候用哪一个。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="android" scheme="https://github.com/DJoeyZhang/tags/android/"/>
    
      <category term="kotlin" scheme="https://github.com/DJoeyZhang/tags/kotlin/"/>
    
  </entry>
  
  <entry>
    <title>Kotlin学习（一）：lateinit vs lazy</title>
    <link href="https://github.com/DJoeyZhang/archives/286767e7.html"/>
    <id>https://github.com/DJoeyZhang/archives/286767e7.html</id>
    <published>2020-01-23T09:01:00.000Z</published>
    <updated>2020-02-04T08:40:53.658Z</updated>
    
    <content type="html"><![CDATA[<h5 id="作为Google的亲儿子，kotlin开发Android应用具有工具多样，上手容易等优势。从语言发展的角度来看，kotlin可以称作为程序员设计的语言。基本语法大家可以去官方文档看，这里我们讨论一些需要注意的地方。"><a href="#作为Google的亲儿子，kotlin开发Android应用具有工具多样，上手容易等优势。从语言发展的角度来看，kotlin可以称作为程序员设计的语言。基本语法大家可以去官方文档看，这里我们讨论一些需要注意的地方。" class="headerlink" title="作为Google的亲儿子，kotlin开发Android应用具有工具多样，上手容易等优势。从语言发展的角度来看，kotlin可以称作为程序员设计的语言。基本语法大家可以去官方文档看，这里我们讨论一些需要注意的地方。"></a>作为Google的亲儿子，kotlin开发Android应用具有工具多样，上手容易等优势。从语言发展的角度来看，kotlin可以称作为程序员设计的语言。基本语法大家可以去官方文档看，这里我们讨论一些需要注意的地方。</h5><a id="more"></a><h5 id="lateinit-vs-lazy"><a href="#lateinit-vs-lazy" class="headerlink" title="lateinit vs lazy"></a>lateinit vs lazy</h5><p>Kotlin中有很多优秀的特性，我们可以利用这些特性在Kotlin中编写更好的应用程序。在这些特性中，lateinit和lazy是重要的属性初始化特性。我们必须知道何时使用哪个属性初始化。</p><h5 id="Kotlin-Property-Initialization"><a href="#Kotlin-Property-Initialization" class="headerlink" title="Kotlin Property Initialization"></a>Kotlin Property Initialization</h5><p>如果不想在构造函数中初始化属性，那么这里有两个重要方法可以完成初始化属性。</p><ul><li>lateinit</li><li>lazy</li></ul><h5 id="lateinit"><a href="#lateinit" class="headerlink" title="lateinit"></a>lateinit</h5><p>lateinit是延迟初始化。</p><p>通常，声明为具有非空类型的属性必须在构造函数中初始化。然而，这通常并不方便。例如，我想通过依赖注入或在单元测试的设置方法中进行初始化操作。在这种情况下，我不能在构造函数中直接初始化这些属性，但如果我这么做了，在方法体内引用到这些属性变量时，编译器会给我报错。</p><p>为了解决这种问题，你可以给属性标记lateinit字段。</p><h5 id="Example"><a href="#Example" class="headerlink" title="Example"></a>Example</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">public class Test &#123;</span><br><span class="line"></span><br><span class="line">  lateinit var mock: Mock</span><br><span class="line"></span><br><span class="line">  @SetUp fun setup() &#123;</span><br><span class="line">     mock = Mock()</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  @Test fun test() &#123;</span><br><span class="line">     mock.do()</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是这个修饰符只能用在类主体（而不是在主构造函数中）内声明的var属性，并且只能在该属性没有自定义getter或setter时使用。属性的类型必须为非空，并且不能是基元类型。</p><h5 id="lazy"><a href="#lazy" class="headerlink" title="lazy"></a>lazy</h5><p>lazy是惰性初始化。</p><p>lazy（）是一个接受lambda并返回lazy实例的函数，该实例可以作为实现lazy属性的委托：get（）的第一个调用执行传递给lazy（）的lambda并记住结果，get（）的后续调用只返回记住的结果。</p><h5 id="Example-1"><a href="#Example-1" class="headerlink" title="Example"></a>Example</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public class Example&#123;</span><br><span class="line">  val name: String by lazy &#123; “Amit Shekhar” &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以第一次和随后的调用，name会返回“Amit Shekhar”</p><h5 id="如何选择何时使用哪一个？"><a href="#如何选择何时使用哪一个？" class="headerlink" title="如何选择何时使用哪一个？"></a>如何选择何时使用哪一个？</h5><ul><li>lazy只能用于val属性，而lateinit只能应用于vars，因为它不能编译为最终字段，因此不能保证不变性。</li><li>lateinit变量可以从任何能看到对象的地方初始化。如果您希望您的属性以一种事先未知的方式从外部初始化，请使用lateinit。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;作为Google的亲儿子，kotlin开发Android应用具有工具多样，上手容易等优势。从语言发展的角度来看，kotlin可以称作为程序员设计的语言。基本语法大家可以去官方文档看，这里我们讨论一些需要注意的地方。&quot;&gt;&lt;a href=&quot;#作为Google的亲儿子，kotlin开发Android应用具有工具多样，上手容易等优势。从语言发展的角度来看，kotlin可以称作为程序员设计的语言。基本语法大家可以去官方文档看，这里我们讨论一些需要注意的地方。&quot; class=&quot;headerlink&quot; title=&quot;作为Google的亲儿子，kotlin开发Android应用具有工具多样，上手容易等优势。从语言发展的角度来看，kotlin可以称作为程序员设计的语言。基本语法大家可以去官方文档看，这里我们讨论一些需要注意的地方。&quot;&gt;&lt;/a&gt;作为Google的亲儿子，kotlin开发Android应用具有工具多样，上手容易等优势。从语言发展的角度来看，kotlin可以称作为程序员设计的语言。基本语法大家可以去官方文档看，这里我们讨论一些需要注意的地方。&lt;/h5&gt;
    
    </summary>
    
    
      <category term="android" scheme="https://github.com/DJoeyZhang/tags/android/"/>
    
      <category term="kotlin" scheme="https://github.com/DJoeyZhang/tags/kotlin/"/>
    
  </entry>
  
  <entry>
    <title>MD常用语法总结</title>
    <link href="https://github.com/DJoeyZhang/archives/ab9e4bfe.html"/>
    <id>https://github.com/DJoeyZhang/archives/ab9e4bfe.html</id>
    <published>2020-01-15T06:02:00.000Z</published>
    <updated>2020-01-16T08:11:03.988Z</updated>
    
    <content type="html"><![CDATA[<h5 id="工欲善其事，必先利其器。记录一下常用的MD语法"><a href="#工欲善其事，必先利其器。记录一下常用的MD语法" class="headerlink" title="工欲善其事，必先利其器。记录一下常用的MD语法"></a>工欲善其事，必先利其器。记录一下常用的MD语法</h5><a id="more"></a><h5 id="1、标题"><a href="#1、标题" class="headerlink" title="1、标题"></a>1、标题<br></h5><p>一个#表示一级标题，最多6个表示6级标题</p><h1 id="h1"><a href="#h1" class="headerlink" title="h1"></a>h1</h1><h2 id="h2"><a href="#h2" class="headerlink" title="h2"></a>h2</h2><h3 id="h3"><a href="#h3" class="headerlink" title="h3"></a>h3</h3><h4 id="h4"><a href="#h4" class="headerlink" title="h4"></a>h4</h4><h5 id="h5"><a href="#h5" class="headerlink" title="h5"></a>h5</h5><h6 id="h6"><a href="#h6" class="headerlink" title="h6"></a>h6</h6><h5 id="2、列表"><a href="#2、列表" class="headerlink" title="2、列表"></a>2、列表<br></h5><p>无序列表，用 * + - 都可以表示,【可以用四个空格来分级】<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">* 列表</span><br><span class="line">    + 次级</span><br><span class="line">    - 次级</span><br><span class="line">* 列表</span><br></pre></td></tr></table></figure></p><p>效果如下<br></p><ul><li>列表<ul><li>次级</li></ul><ul><li>次级</li></ul></li><li>列表</li></ul><h5 id="3、分割线"><a href="#3、分割线" class="headerlink" title="3、分割线"></a>3、分割线<br></h5><p>用三个 - 或 _ 表示<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">___</span><br></pre></td></tr></table></figure></p><p>效果如下<br></p><hr><hr><h5 id="4、链接"><a href="#4、链接" class="headerlink" title="4、链接"></a>4、链接<br></h5><p>链接文字放到中括号[]里，链接地址放到小括号里，<br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">比如：[链接文字](http://baidu.com) </span><br><span class="line">比如：&lt;http://baidu.com&gt; </span><br><span class="line">[谷歌][1]，[雅虎][2]，[微软][3]</span><br><span class="line">[1]: http://google.com/ &quot;google&quot;</span><br><span class="line">[2]: http://yahoo.com/ &quot;yahoo&quot;</span><br><span class="line">[3]: http://msn.com/ &quot;msn&quot;</span><br></pre></td></tr></table></figure></p><p>效果如下<br><br>比如：<a href="http://baidu.com" target="_blank" rel="noopener">链接文字</a><br>比如：<a href="http://baidu.com" target="_blank" rel="noopener">http://baidu.com</a><br>[谷歌][1]，[雅虎][2]，[微软][3]<br>[1]: <a href="http://google.com/" target="_blank" rel="noopener">http://google.com/</a> “google”<br>[2]: <a href="http://yahoo.com/" target="_blank" rel="noopener">http://yahoo.com/</a> “yahoo”<br>[3]: <a href="http://msn.com/" target="_blank" rel="noopener">http://msn.com/</a> “msn”</p><h5 id="5、图片"><a href="#5、图片" class="headerlink" title="5、图片"></a>5、图片<br></h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![百度](https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1579079569938&amp;di=6d83e30e6900484e114b728c02c509d4&amp;imgtype=jpg&amp;src=http%3A%2F%2Fimg0.imgtn.bdimg.com%2Fit%2Fu%3D1971315160%2C3100712330%26fm%3D214%26gp%3D0.jpg)</span><br></pre></td></tr></table></figure><p>效果如下：<img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1579079569938&amp;di=6d83e30e6900484e114b728c02c509d4&amp;imgtype=jpg&amp;src=http%3A%2F%2Fimg0.imgtn.bdimg.com%2Fit%2Fu%3D1971315160%2C3100712330%26fm%3D214%26gp%3D0.jpg" alt="百度"><br><br></p><h5 id="6、代码框"><a href="#6、代码框" class="headerlink" title="6、代码框"></a>6、代码框<br></h5><p>开头结尾用`，单行用一个`，多行用三个```<br>单行：开头结尾用一个反引号`</p><p><code>console.log(&#39;talk is cheap, show me the code&#39;)</code></p><p>console.log(‘talk is cheap, show me the code’)</p><p>多行：开头与结尾分别用三个反引号```<br>单独占一行,可指定或不指定语言，比如javascript<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i <span class="keyword">in</span> skills)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'wanderful skill: '</span> + skills[I]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><br></p><h5 id="7、强调"><a href="#7、强调" class="headerlink" title="7、强调"></a>7、强调<br></h5><p>开头结尾用*(或者_)，*表示斜体，**表示加粗，***表示斜体加粗</p><p><em>em</em><br><br><strong>strong</strong><br><br><strong><em>斜体加粗</em></strong><br></p><h5 id="8、删除线"><a href="#8、删除线" class="headerlink" title="8、删除线"></a>8、删除线<br></h5><p>开头结尾用~~<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">~~待删除~~</span><br></pre></td></tr></table></figure></p><p><del>待删除</del></p>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;工欲善其事，必先利其器。记录一下常用的MD语法&quot;&gt;&lt;a href=&quot;#工欲善其事，必先利其器。记录一下常用的MD语法&quot; class=&quot;headerlink&quot; title=&quot;工欲善其事，必先利其器。记录一下常用的MD语法&quot;&gt;&lt;/a&gt;工欲善其事，必先利其器。记录一下常用的MD语法&lt;/h5&gt;
    
    </summary>
    
    
      <category term="tools" scheme="https://github.com/DJoeyZhang/tags/tools/"/>
    
  </entry>
  
  <entry>
    <title>移动开发者音视频知识扫盲</title>
    <link href="https://github.com/DJoeyZhang/archives/6b71779b.html"/>
    <id>https://github.com/DJoeyZhang/archives/6b71779b.html</id>
    <published>2020-01-14T09:33:02.000Z</published>
    <updated>2020-01-16T07:33:15.069Z</updated>
    
    <content type="html"><![CDATA[<h5 id="工作原因，接触到音视频开发，作为移动开发者，掌握必要的音视频概念是很必要的。此篇记录一些音视频开发中常用的术语，做一些简单的扫盲工作。"><a href="#工作原因，接触到音视频开发，作为移动开发者，掌握必要的音视频概念是很必要的。此篇记录一些音视频开发中常用的术语，做一些简单的扫盲工作。" class="headerlink" title="工作原因，接触到音视频开发，作为移动开发者，掌握必要的音视频概念是很必要的。此篇记录一些音视频开发中常用的术语，做一些简单的扫盲工作。"></a>工作原因，接触到音视频开发，作为移动开发者，掌握必要的音视频概念是很必要的。此篇记录一些音视频开发中常用的术语，做一些简单的扫盲工作。<br></h5><p>先上两个经典的音视频项目地址，供参考研究：<br><br>ijkPlayer:<a href="https://github.com/bilibili/ijkplayer">https://github.com/bilibili/ijkplayer</a> <br><br>GSYVideoPlayer:<a href="https://github.com/CarGuo/GSYVideoPlayer">https://github.com/CarGuo/GSYVideoPlayer</a><br><a id="more"></a></p><h4 id="一、基本概念"><a href="#一、基本概念" class="headerlink" title="一、基本概念"></a>一、基本概念</h4><p>首先，如下图所示是一个 .MOV 的视频文件，可以看到更多信息栏里编码器有 AAC 、HEVC ，而这个就是视频的音频编码和视频编码，而 MOV 其实就是封装协议，这其实就是我们接下来要介绍的基本概念。<br><img src="../images/WechatIMG341.png" alt=""></p><p>一般情况下，视频流从加载都准备播放是需要经过解协议、解封装、解编码这样的过程，其中协议指的就是流媒体协议；封装是的是视频的封装格式；编码又分为视频编码和音频编码。<br><br>协议一般有 HTTP 、RTSP、RTMP 等，我们就最常见的就是 HTTP 网络协议，而 RTSP 和 RTMP 一般用于直播流或支持带有控制信令的常见，比如远程监控。<br><br>视频封装协议指的是我们常见的 MP4 、AVI 、RMVB 、MKV、TS、FLV 等常见后缀格式，它们所表示的就是多媒体的封装协议，就是在传输过程中把音频和视频打包都一起的封装，所以播放前是需要把这部分内容解开，提取出对应音频编码和视频编码。</p><p>所以如果以后有人问你，你是视频编码是什么，专业的你不能再回答 “我的视频编码是 MP4” 这样的回复哟。</p><h5 id="1、音频编码"><a href="#1、音频编码" class="headerlink" title="1、音频编码"></a>1、音频编码</h5><p>音频编码指的是音频数据的编码方式，常见的如：MP3、 PCM、WAV、AAC、AC-3 等，因为音频的原始数据大小一般不适合直接传入，比如原始大小一般可以按照采样率 <em> 声道数 </em> 样本格式 去计算，假设前面那个 MOV 的音频采样率是 44100 、样本格式是 16 bit 、单声道、24 秒，那么它原始音频大小应该是<br><br><code>44100 * 16 * 1 * 24 / 8 ≈ 2MB</code><br><br><br>而实际将音频信息提取出来的大小，如下图大概只有 200 多K，这就是音频编码的作用。</p><p><img src="../images/WechatIMG343.png" alt=""></p><p>所以一般都会音频传输会采用各种编码格式进行压缩和去冗余，其中比如 WAV/PCM 编码的音频质量比较好，但是体积会比较大；MP3 有损压缩能在音频质量还可以的情况下压缩音频的体积；AAC 也是有损压缩，但是又有分有 LC-AAC、HE-AAC等。</p><h5 id="2、视频编码"><a href="#2、视频编码" class="headerlink" title="2、视频编码"></a>2、视频编码</h5><p>视频编码指的就是画面图像的编码压缩方式，一般有 H263、H264、HEVC（H265）、MPEG-2 、MPEG-4 等，其中H264 是目前比较常见的编码方式。<br><br>通常情况下我们理解的画面是 RGB 组合出来，而目前视频领域可能更多使用 YUV 格式，其中 Y 表示的是亮度（灰度），而 U 和 V表示的是色度（饱和度）。<br><br>YUV 是对 RGB 的特殊处理和叠加来获取颜色，比如 YUV420 可以理解对色度以 2：1 的抽样率进行存储，然后亮度透过色度来显示画面，更多 YUV 的这里就不展开讨论，而为什么使用 YUV 其中有一点因素就是为了兼容以前的黑白电视。<br><br>为什么不直接用原始 YUV ？这里假设上面的 MOV 视频直接使用 YUV420 的格式，那么一帧的大小就会是：<br><br><code>1080 * 1920 * 1 + 1080 * 1920 * 0.5 = 2.9MB</code><br><br><br>如果在这个基础上，算上帧率（30）和一个视频的时长（一小时），那一部视频原始大小就会是天文数字，这样的情况明显不符合网络传输，所以才有了视频编码用于压缩图像。<br><br>在视频压缩里，又有几个概念需要知道，比如：</p><ul><li>IPB 帧是一种常见的帧压缩方法，其中 I 帧属于关键帧是每个画面的参考帧； P 帧是前向预测帧；B 帧是双向预测帧。简单来说就是 I 帧自己就可以得到一个完整画面，而 P 帧需要前面的 I 帧或者 P 帧来帮助解码得到一个完整画面，而 B 帧则需要前面的 I/P 帧或者后面的 P 帧来协助形成一个画面。</li></ul><ul><li>所以 I 帧是很关键的存在，压缩 I 帧就可以很容易压制掉空间的大小，而压缩 P/B 帧可以压缩掉时间上的冗余信息 。所以在视频 seek 的时候，I 帧很关键，如果视频 seek 之后发生往前的跳动，那很可能就是你的视频压缩得太厉害了。</li></ul><ul><li>还有一个叫 IDR 帧的概念，因为 H264 采用的是多帧预测，导致 I 帧不能作为独立的观察条件，所以多出一个叫  IDR 帧的特殊 I 帧用于参考，IDR 帧最关键的概念就是：在解码器过程中一旦收到 IDR 帧，就会立即清空参考帧缓冲区，并将IDR帧作为被参考帧。</li></ul><ul><li><p>在视频解码里还有一个叫 DTS（Decoding Time Stamp） 和 PTS（Presentation Time Stamp）的存在，DTS主要用于视频的解码，PTS主要用于在解码阶段对视频进行同步和输出。因为视频包里面数据解码不是连续的，而是需要通过解码数据源得到的 DTS，才 决定以包应该在什么时候被解码，而得到的PTS 决定了解码后的图片什么时候被绘制。</p></li><li><p>GOP（Group Of Picture）就是两个 I 帧之间的距离，一般 GOP 设置得越大，画面的效果就会越好，到那时需要解码的时间就会越长。 所以如果码率固定而 GOP 值越大，P/B帧 数量会越多，画面质量就会越高。</p></li></ul><h4 id="二、Q-amp-A"><a href="#二、Q-amp-A" class="headerlink" title="二、Q&amp;A"></a>二、Q&amp;A</h4><p>首先说一个经常被问的问题：ffmpeg 全称是 Fast Forward Mpeg ，所以读法为 (ef,ef,’em,peg) ，一般情况下 ffmpeg 使用的是软解码，也即是纯 CPU 解码；而使用平台的 MediaCodec 播放的是硬解码，也就是支持 GPU 协助。<br></p><p>问题1:“为什么同一个视频机器A可以播机器B不可以？”<br><br>这个问题很大可能就是使用了 MediaCodec 的硬解码播放，不同手机和系统版本，对于硬解码的支持是不一样的。<br><br>问题2:“为什么都是 ffmpeg 播放，vlc 可以播放，ijkplayer 却不行？”<br><br>这是因为 ffmpeg 是支持根据配置打包的，因为很多时候你并不需要那么多，比如在 configure 文件中打开和关闭某些格式的支持来达到按需打包的目的，所以同样是 ffmpeg 不同项目打包支持的程度可能都不同。<br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">支持wav</span><br><span class="line"></span><br><span class="line">    --enable-libwavpack</span><br><span class="line">    --enable-muxer=wav</span><br><span class="line">    --enable-demuxer=wav</span><br><span class="line">    --enable-decoder=wavpack</span><br><span class="line">    --enable-encoder=wavpack</span><br><span class="line">    --enable-decoder=wav</span><br><span class="line">    --enable-encoder=wav</span><br><span class="line">    --enable-encoder=pcm_s16le</span><br><span class="line">    --enable-decoder=pcm_s16le</span><br><span class="line"></span><br><span class="line">    --enable-encoder=pcm_u8</span><br><span class="line">    --enable-decoder=pcm_u8</span><br><span class="line">    --enable-muxer=pcm_u8</span><br><span class="line">    --enable-demuxer=pcm_u8  </span><br><span class="line">    </span><br><span class="line">支持mp2    </span><br><span class="line">    --enable-encoder=mp2 </span><br><span class="line">    --enable-decoder=mp2 </span><br><span class="line">    --enable-muxer=mp2 </span><br><span class="line">    --enable-decoder=mp2float </span><br><span class="line">    --enable-encoder=mp2fixed </span><br><span class="line">    </span><br><span class="line">支持 h265   </span><br><span class="line">    --enable-decoder=hevc</span><br></pre></td></tr></table></figure></p><p>复制代码问题3：“为什么我的视频缓冲了，在 seek 之后还需要重新请求？”<br><br>这就需要解释缓存和缓冲的区别：</p><p>缓冲：就像在倒垃圾的时候，不可能一有垃圾马上跑去垃圾堆倒，而是先把垃圾倒到垃圾桶，垃圾桶满了再一起倒到垃堆。因为缓冲是在内存中，不可在内存中把整个视频都缓冲进去，所以一般情况下你看到的缓冲都是一段一段的临时数据，一个缓冲块是处于不断地加载又不断清除的过程。</p><p>缓存: 缓存的解释就简单多了，就是把视频在播放的时候一边下载到本地，这样在缓存区域内的数据就不需要发生二次请求。</p><p>问题4：“为什么我的视频在拖拽之后会出现跳动？”<br><br>其实前面已经解释过了，这和视频的关键帧有关系，同时也和 ffmpeg 选择的兼容策略有关系，比如使用 -accurate_seek 可以让位于跳转点和 position 之间的额外部分将被解码并且丢弃，对应 ijk 中就是 enable-accurate-seek 的配置。<br></p><p>问题5：“为什么我的视频会出现音视频不同步？”<br><br>首选确定你的播放器使用的音视频同步协议是什么，比如 ijkplayer 是使用音频作为同步时钟，如果在 ijkplayer 里 在出现音视频不同步，那么很可能就是视频的码率或者帧率太高，可以尝试使用使用 framedrop 丢帧或者开启硬解码支持。<br></p><p>问题6：“为什么我的视频会出现大小和方向不对？”<br><br>一般情况下视频信息里是带有旋转角度的，比如 Android 手机上录制的视频就可能带有旋转角度，所以在布局和绘制时需要把旋转角度如： 270，90 这样的角度考虑上。<br>另外视频在获取大小还会有  Width Height Ratio 的信息也就是宽高比，例如这个信息在 ijkplayer 上是以 videoSarNum / videoSarDen 得到的，只有把宽高比和视频的宽高一起计算，才能获取到真正的展示宽高。<br></p><p>问题7：“为什么我的视频会出现黑边？”<br><br>这个问题其实就是常识性问题，面对不同尺寸不同分辨率的平台，视频显示是根据你给定的 Surface 大小去进行显示，所以你可以选择使用拉伸、裁剪、适应高度、适应宽度等不同布局模式去配置你的绘制控件，这样就可以达到你需要的控制黑边的场景。<br></p><p>诸如此类的问题还有 “如何获取某个时间戳的图像”、“如何同时播放几个视频”、“如何实现播放滤镜”、“如何实现倍速播放” 等问题，这里就不一一展开，感兴趣的可以去 GSYVideoPlayer 的 issue 或者搜索相关的 ffmpeg 实现。<br><br>使用场景<br><br>最后讲一下音视频开发的使用场景，为什么要说这个呢？<br>因为很多时候开发者可能以为“不就是接个播放器 SDK 放个 Url 的功夫吗？” 其实还真不是，做过音视频开发的应该都深有体会。</p><p>1、首先在做音视频开发时，要确定好自己需要支持的封装协议、视频编码、音频编码格式，因为编码格式千万种，一般情况下你不可能全都支持，所以首先要在需求内确定好需要支持的格式范围。</p><p>2、如果存在用户自主上传视频的场景，最好还要在服务端提供转格式与转码率等功能。因为在服务端判断视频格式并转码可以规范编码统一，这能够减少客户端端因为编解码失败无法播放的问题；另外提供同一视频不同码率的链接，可以在不同手机型号和系统上能够拥有更好的播放体验，减少前面说过的因为码率太高出现音视频不同步或者卡顿的问题。</p><p>3、在网络播放中存在很多场景，比如播放过程中网络环境出现变化，是从 4G 转化为 Wifi 还是从 Wifi 转到了 4G 的场景 ，这里面涉及到两个点：第一是网络环境发生改变，那么原本的拉流通道其实已经断开，这时候需要重新启动一个新的连接来替换旧的播放内核，才能实现继续播放；第二就是 Wifi 到 4G 之间的环境发生改变时，需要给用户提示并确定是否执行后续操作。</p><p>4、还有比如当视频画面需要从列表切换到详情页，需要从原本的容器切换到另外一个可渲染容器时，需要在播放内核不暂停的情况下去设置不同的 Surface 来达到切换的目的；片头广告的播放与视频内容的预加载需要两个不同的请求处理等等的场景。</p>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;工作原因，接触到音视频开发，作为移动开发者，掌握必要的音视频概念是很必要的。此篇记录一些音视频开发中常用的术语，做一些简单的扫盲工作。&quot;&gt;&lt;a href=&quot;#工作原因，接触到音视频开发，作为移动开发者，掌握必要的音视频概念是很必要的。此篇记录一些音视频开发中常用的术语，做一些简单的扫盲工作。&quot; class=&quot;headerlink&quot; title=&quot;工作原因，接触到音视频开发，作为移动开发者，掌握必要的音视频概念是很必要的。此篇记录一些音视频开发中常用的术语，做一些简单的扫盲工作。&quot;&gt;&lt;/a&gt;工作原因，接触到音视频开发，作为移动开发者，掌握必要的音视频概念是很必要的。此篇记录一些音视频开发中常用的术语，做一些简单的扫盲工作。&lt;br&gt;&lt;/h5&gt;&lt;p&gt;先上两个经典的音视频项目地址，供参考研究：&lt;br&gt;&lt;br&gt;ijkPlayer:&lt;a href=&quot;https://github.com/bilibili/ijkplayer&quot;&gt;https://github.com/bilibili/ijkplayer&lt;/a&gt; &lt;br&gt;&lt;br&gt;GSYVideoPlayer:&lt;a href=&quot;https://github.com/CarGuo/GSYVideoPlayer&quot;&gt;https://github.com/CarGuo/GSYVideoPlayer&lt;/a&gt;&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Mybatis中涉及到的一些设计模式</title>
    <link href="https://github.com/DJoeyZhang/archives/2387c9a6.html"/>
    <id>https://github.com/DJoeyZhang/archives/2387c9a6.html</id>
    <published>2020-01-14T02:14:00.000Z</published>
    <updated>2020-01-16T07:33:18.968Z</updated>
    
    <content type="html"><![CDATA[<h5 id="有个笑话说：别管什么算法设计模式，老夫写代码就是一把梭。诚然，业务模型简单的时候，也许if-else或者switch语句要胜于复杂的设计模式应用。随着业务发展，业务模型大量耦合层级更复杂的时候，面对屎山一样的代码，看不下去了，要refactor，那么设计模式相关知识就很重要。这里记一篇通过Mybatis源码中总结到的设计模式。"><a href="#有个笑话说：别管什么算法设计模式，老夫写代码就是一把梭。诚然，业务模型简单的时候，也许if-else或者switch语句要胜于复杂的设计模式应用。随着业务发展，业务模型大量耦合层级更复杂的时候，面对屎山一样的代码，看不下去了，要refactor，那么设计模式相关知识就很重要。这里记一篇通过Mybatis源码中总结到的设计模式。" class="headerlink" title="有个笑话说：别管什么算法设计模式，老夫写代码就是一把梭。诚然，业务模型简单的时候，也许if-else或者switch语句要胜于复杂的设计模式应用。随着业务发展，业务模型大量耦合层级更复杂的时候，面对屎山一样的代码，看不下去了，要refactor，那么设计模式相关知识就很重要。这里记一篇通过Mybatis源码中总结到的设计模式。"></a>有个笑话说：别管什么算法设计模式，老夫写代码就是一把梭。诚然，业务模型简单的时候，也许if-else或者switch语句要胜于复杂的设计模式应用。随着业务发展，业务模型大量耦合层级更复杂的时候，面对屎山一样的代码，看不下去了，要refactor，那么设计模式相关知识就很重要。这里记一篇通过Mybatis源码中总结到的设计模式。</h5><a id="more"></a><h5 id="虽然我们都知道有26个设计模式，但是大多停留在概念层面，真实开发中很少遇到，Mybatis源码中使用了大量的设计模式，阅读源码并观察设计模式在其中的应用，能够更深入的理解设计模式。"><a href="#虽然我们都知道有26个设计模式，但是大多停留在概念层面，真实开发中很少遇到，Mybatis源码中使用了大量的设计模式，阅读源码并观察设计模式在其中的应用，能够更深入的理解设计模式。" class="headerlink" title="虽然我们都知道有26个设计模式，但是大多停留在概念层面，真实开发中很少遇到，Mybatis源码中使用了大量的设计模式，阅读源码并观察设计模式在其中的应用，能够更深入的理解设计模式。"></a>虽然我们都知道有26个设计模式，但是大多停留在概念层面，真实开发中很少遇到，Mybatis源码中使用了大量的设计模式，阅读源码并观察设计模式在其中的应用，能够更深入的理解设计模式。</h5><h5 id="Mybatis至少应用了以下九种设计模式："><a href="#Mybatis至少应用了以下九种设计模式：" class="headerlink" title="Mybatis至少应用了以下九种设计模式："></a>Mybatis至少应用了以下九种设计模式：</h5><p>1、Builder模式；2、工厂模式；3、单例模式；4、代理模式；5、组合模式；6、模板方法模式；7、适配器模式；8、装饰者模式；9、迭代器模式；<br></p><h6 id="一、Builder模式"><a href="#一、Builder模式" class="headerlink" title="一、Builder模式:"></a>一、Builder模式:<br></h6><p>Builder模式的定义是“将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示。”<br><br>它属于创建类模式，一般来说，如果一个对象的构建比较复杂，超出了构造函数所能包含的范围，就可以使用工厂模式和Builder模式，相对于工厂模式会产出一个完整的产品，Builder应用于更加复杂的对象的构建，甚至只会构建产品的一个部分。<br><br>在Mybatis环境的初始化过程中，会做大量的XpathParser解析、配置或语法的解析、反射生成对象、存入结果缓存等步骤，这么多的工作都不是一个构造函数所能包括的，因此大量采用了Builder模式来解决。对于builder的具体类，方法都大都用build*开头，比如SqlSessionFactoryBuilder为例，它根据不同的输入参数来构建SqlSessionFactory这个工厂对象。<br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">public class SqlSessionFactoryBuilder &#123;</span><br><span class="line">  ...</span><br><span class="line">  //示例代码保留两个重要的build重载方法</span><br><span class="line">  public SqlSessionFactory build(Reader reader, String environment, Properties properties) &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">      XMLConfigBuilder parser = new XMLConfigBuilder(reader, environment, properties);</span><br><span class="line">      return build(parser.parse());</span><br><span class="line">    &#125; catch (Exception e) &#123;</span><br><span class="line">      throw ExceptionFactory.wrapException(&quot;Error building SqlSession.&quot;, e);</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">      ErrorContext.instance().reset();</span><br><span class="line">      try &#123;</span><br><span class="line">        reader.close();</span><br><span class="line">      &#125; catch (IOException e) &#123;</span><br><span class="line">        // Intentionally ignore. Prefer previous error.</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  public SqlSessionFactory build(InputStream inputStream, String environment, Properties properties) &#123;</span><br><span class="line">    try &#123;</span><br><span class="line">      XMLConfigBuilder parser = new XMLConfigBuilder(inputStream, environment, properties);</span><br><span class="line">      return build(parser.parse());</span><br><span class="line">    &#125; catch (Exception e) &#123;</span><br><span class="line">      throw ExceptionFactory.wrapException(&quot;Error building SqlSession.&quot;, e);</span><br><span class="line">    &#125; finally &#123;</span><br><span class="line">      ErrorContext.instance().reset();</span><br><span class="line">      try &#123;</span><br><span class="line">        inputStream.close();</span><br><span class="line">      &#125; catch (IOException e) &#123;</span><br><span class="line">        // Intentionally ignore. Prefer previous error.</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h6 id="二、工厂模式"><a href="#二、工厂模式" class="headerlink" title="二、工厂模式:"></a>二、工厂模式:<br></h6><p>在Mybatis中比如SqlSessionFactory使用的是工厂模式，该工厂没有那么复杂的逻辑，是一个简单工厂模式。简单工厂模式(Simple Factory Pattern)：又称为静态工厂方法(Static Factory Method)模式，它属于类创建型模式。<br><br>在简单工厂模式中，可以根据参数的不同返回不同类的实例。简单工厂模式专门定义一个类来负责创建其他类的实例，被创建的实例通常都具有共同的父类。SqlSession可以认为是一个Mybatis工作的核心的接口，通过这个接口可以执行执行SQL语句、获取Mappers、管理事务。类似于连接MySQL的Connection对象。可以看到，该Factory的openSession方法重载了很多个，分别支持autoCommit、Executor、Transaction等参数的输入，来构建核心的SqlSession对象。在DefaultSqlSessionFactory的默认工厂实现里，有一个方法可以看出工厂怎么产出一个产品：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">private SqlSession openSessionFromDataSource(ExecutorType execType, TransactionIsolationLevel level, boolean autoCommit) &#123;</span><br><span class="line">Transaction tx = null;</span><br><span class="line">try &#123;</span><br><span class="line">final Environment environment = configuration.getEnvironment();</span><br><span class="line">final TransactionFactory transactionFactory = getTransactionFactoryFromEnvironment(environment);</span><br><span class="line">tx = transactionFactory.newTransaction(environment.getDataSource(), level, autoCommit);</span><br><span class="line">final Executor executor = configuration.newExecutor(tx, execType);</span><br><span class="line">return new DefaultSqlSession(configuration, executor, autoCommit);</span><br><span class="line">&#125; catch (Exception e) &#123;</span><br><span class="line">closeTransaction(tx); // may have fetched a connection so lets call</span><br><span class="line">// close()</span><br><span class="line">throw ExceptionFactory.wrapException(&quot;Error opening session.  Cause: &quot; + e, e);</span><br><span class="line">&#125; finally &#123;</span><br><span class="line">ErrorContext.instance().reset();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这是一个openSession调用的底层方法，该方法先从configuration读取对应的环境配置，然后初始化TransactionFactory获得一个Transaction对象，然后通过Transaction获取一个Executor对象，最后通过configuration、Executor、是否autoCommit三个参数构建了SqlSession。在这里其实也可以看到端倪，SqlSession的执行，其实是委托给对应的Executor来进行的。而对于LogFactory，它的实现代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">public final class LogFactory &#123;</span><br><span class="line">private static Constructor&lt;? extends Log&gt; logConstructor;</span><br><span class="line"></span><br><span class="line">private LogFactory() &#123;</span><br><span class="line">// disable construction</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static Log getLog(Class&lt;?&gt; aClass) &#123;</span><br><span class="line">return getLog(aClass.getName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>这里有个特别的地方，是Log变量的的类型是Constructor&lt;? extends Log&gt;，也就是说该工厂生产的不只是一个产品，而是具有Log公共接口的一系列产品，比如Log4jImpl、Slf4jImpl等很多具体的Log。<br></p><h6 id="三、单例模式-Singleton-Pattern-："><a href="#三、单例模式-Singleton-Pattern-：" class="headerlink" title="三、单例模式(Singleton Pattern)："></a>三、单例模式(Singleton Pattern)：</h6><p>单例模式确保某一个类只有一个实例，而且自行实例化并向整个系统提供这个实例，这个类称为单例类，它提供全局访问的方法。<br><br>单例模式的要点有三个：一是某个类只能有一个实例；二是它必须自行创建这个实例；三是它必须自行向整个系统提供这个实例。<br><br>单例模式是一种对象创建型模式。单例模式又名单件模式或单态模式。在Mybatis中有两个地方用到单例模式，ErrorContext和LogFactory，其中ErrorContext是用在每个线程范围内的单例，用于记录该线程的执行环境错误信息，而LogFactory则是提供给整个Mybatis使用的日志工厂，用于获得针对项目配置好的日志对象。<br><br>ErrorContext的单例实现代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">public class ErrorContext &#123;</span><br><span class="line"></span><br><span class="line">private static final ThreadLocal&lt;ErrorContext&gt; LOCAL = new ThreadLocal&lt;ErrorContext&gt;();</span><br><span class="line"></span><br><span class="line">private ErrorContext() &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public static ErrorContext instance() &#123;</span><br><span class="line">ErrorContext context = LOCAL.get();</span><br><span class="line">if (context == null) &#123;</span><br><span class="line">context = new ErrorContext();</span><br><span class="line">LOCAL.set(context);</span><br><span class="line">&#125;</span><br><span class="line">return context;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>构造函数是private修饰，具有一个static的局部instance变量和一个获取instance变量的方法，在获取实例的方法中，先判断是否为空如果是的话就先创建，然后返回构造好的对象。只是这里有个有趣的地方是，LOCAL的静态实例变量使用了ThreadLocal修饰，也就是说它属于每个线程各自的数据，而在instance()方法中，先获取本线程的该实例，如果没有就创建该线程独有的ErrorContext。</p><h6 id="四、代理模式"><a href="#四、代理模式" class="headerlink" title="四、代理模式:"></a>四、代理模式:<br></h6><p>代理模式可以认为是Mybatis的核心使用的模式，正是由于这个模式，我们只需要编写Mapper.java接口，不需要实现，由Mybatis后台帮我们完成具体SQL的执行。代理模式(Proxy Pattern) ：给某一个对象提供一个代理，并由代理对象控制对原对象的引用。代理模式的英文叫做Proxy或Surrogate，它是一种对象结构型模式。代理模式包含如下角色：Subject: 抽象主题角色Proxy: 代理主题角色RealSubject: 真实主题角色这里有两个步骤，第一个是提前创建一个Proxy，第二个是使用的时候会自动请求Proxy，然后由Proxy来执行具体事务；当我们使用Configuration的getMapper方法时，会调用mapperRegistry.getMapper方法，而该方法又会调用mapperProxyFactory.newInstance(sqlSession)来生成一个具体的代理<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">public class MapperProxyFactory&lt;T&gt; &#123;</span><br><span class="line"></span><br><span class="line">private final Class&lt;T&gt; mapperInterface;</span><br><span class="line">private final Map&lt;Method, MapperMethod&gt; methodCache = new ConcurrentHashMap&lt;Method, MapperMethod&gt;();</span><br><span class="line"></span><br><span class="line">public MapperProxyFactory(Class&lt;T&gt; mapperInterface) &#123;</span><br><span class="line">this.mapperInterface = mapperInterface;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public Class&lt;T&gt; getMapperInterface() &#123;</span><br><span class="line">return mapperInterface;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public Map&lt;Method, MapperMethod&gt; getMethodCache() &#123;</span><br><span class="line">return methodCache;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@SuppressWarnings(&quot;unchecked&quot;)</span><br><span class="line">protected T newInstance(MapperProxy&lt;T&gt; mapperProxy) &#123;</span><br><span class="line">return (T) Proxy.newProxyInstance(mapperInterface.getClassLoader(), new Class[] &#123; mapperInterface &#125;,</span><br><span class="line">mapperProxy);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public T newInstance(SqlSession sqlSession) &#123;</span><br><span class="line">final MapperProxy&lt;T&gt; mapperProxy = new MapperProxy&lt;T&gt;(sqlSession, mapperInterface, methodCache);</span><br><span class="line">return newInstance(mapperProxy);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在这里，先通过T newInstance(SqlSession sqlSession)方法会得到一个MapperProxy对象，然后调用T newInstance(MapperProxymapperProxy)生成代理对象然后返回。而查看MapperProxy的代码，可以看到如下内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public class MapperProxy&lt;T&gt; implements InvocationHandler, Serializable &#123;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public Object invoke(Object proxy, Method method, Object[] args) throws Throwable &#123;</span><br><span class="line">try &#123;</span><br><span class="line">if (Object.class.equals(method.getDeclaringClass())) &#123;</span><br><span class="line">return method.invoke(this, args);</span><br><span class="line">&#125; else if (isDefaultMethod(method)) &#123;</span><br><span class="line">return invokeDefaultMethod(proxy, method, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125; catch (Throwable t) &#123;</span><br><span class="line">throw ExceptionUtil.unwrapThrowable(t);</span><br><span class="line">&#125;</span><br><span class="line">final MapperMethod mapperMethod = cachedMapperMethod(method);</span><br><span class="line">return mapperMethod.execute(sqlSession, args);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>非常典型的，该MapperProxy类实现了InvocationHandler接口，并且实现了该接口的invoke方法。通过这种方式，我们只需要编写Mapper.java接口类，当真正执行一个Mapper接口的时候，就会转发给MapperProxy.invoke方法，而该方法则会调用后续的sqlSession.cud&gt;executor.execute&gt;prepareStatement等一系列方法，完成SQL的执行和返回。<br></p><h6 id="五、组合模式"><a href="#五、组合模式" class="headerlink" title="五、组合模式:"></a>五、组合模式:<br></h6><p>组合模式组合多个对象形成树形结构以表示“整体-部分”的结构层次。组合模式对单个对象(叶子对象)和组合对象(组合对象)具有一致性，它将对象组织到树结构中，可以用来描述整体与部分的关系。<br><br>同时它也模糊了简单元素(叶子对象)和复杂元素(容器对象)的概念，使得客户能够像处理简单元素一样来处理复杂元素，从而使客户程序能够与复杂元素的内部结构解耦。在使用组合模式中需要注意一点也是组合模式最关键的地方：叶子对象和组合对象实现相同的接口。这就是组合模式能够将叶子节点和对象节点进行一致处理的原因。Mybatis支持动态SQL的强大功能，比如下面的这个SQL：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&lt;update id=&quot;update&quot; parameterType=&quot;org.format.dynamicproxy.mybatis.bean.User&quot;&gt;</span><br><span class="line">    UPDATE users</span><br><span class="line">    &lt;trim prefix=&quot;SET&quot; prefixOverrides=&quot;,&quot;&gt;</span><br><span class="line">        &lt;if test=&quot;name != null and name != &apos;&apos;&quot;&gt;</span><br><span class="line">            name = #&#123;name&#125;</span><br><span class="line">        &lt;/if&gt;</span><br><span class="line">        &lt;if test=&quot;age != null and age != &apos;&apos;&quot;&gt;</span><br><span class="line">            , age = #&#123;age&#125;</span><br><span class="line">        &lt;/if&gt;</span><br><span class="line">        &lt;if test=&quot;birthday != null and birthday != &apos;&apos;&quot;&gt;</span><br><span class="line">            , birthday = #&#123;birthday&#125;</span><br><span class="line">        &lt;/if&gt;</span><br><span class="line">    &lt;/trim&gt;</span><br><span class="line">    where id = $&#123;id&#125;</span><br><span class="line">&lt;/update&gt;</span><br></pre></td></tr></table></figure></p><p>在这里面使用到了trim、if等动态元素，可以根据条件来生成不同情况下的SQL；在DynamicSqlSource.getBoundSql方法里，调用了rootSqlNode.apply(context)方法，apply方法是所有的动态节点都实现的接口：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">public interface SqlNode &#123;</span><br><span class="line">boolean apply(DynamicContext context);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>对于实现该SqlSource接口的所有节点，就是整个组合模式树的各个节点：组合模式的简单之处在于，所有的子节点都是同一类节点，可以递归的向下执行，比如对于TextSqlNode，因为它是最底层的叶子节点，所以直接将对应的内容append到SQL语句中：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public boolean apply(DynamicContext context) &#123;</span><br><span class="line">GenericTokenParser parser = createParser(new BindingTokenParser(context, injectionFilter));</span><br><span class="line">context.appendSql(parser.parse(text));</span><br><span class="line">return true;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>但是对于IfSqlNode，就需要先做判断，如果判断通过，仍然会调用子元素的SqlNode，即contents.apply方法，实现递归的解析。<br><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public boolean apply(DynamicContext context) &#123;</span><br><span class="line">if (evaluator.evaluateBoolean(test, context.getBindings())) &#123;</span><br><span class="line">contents.apply(context);</span><br><span class="line">return true;</span><br><span class="line">&#125;</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h6 id="六、模板方法模式"><a href="#六、模板方法模式" class="headerlink" title="六、模板方法模式:"></a>六、模板方法模式:<br></h6><p>模板方法模式是所有模式中最为常见的几个模式之一，是基于继承的代码复用的基本技术。模板方法模式需要开发抽象类和具体子类的设计师之间的协作。一个设计师负责给出一个算法的轮廓和骨架，另一些设计师则负责给出这个算法的各个逻辑步骤。<br><br>代表这些具体逻辑步骤的方法称做基本方法(primitive method)；而将这些基本方法汇总起来的方法叫做模板方法(template method)，这个设计模式的名字就是从此而来。<br><br>模板类定义一个操作中的算法的骨架，而将一些步骤延迟到子类中。使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤。在Mybatis中，sqlSession的SQL执行，都是委托给Executor实现的，Executor包含以下结构：其中的BaseExecutor就采用了模板方法模式，它实现了大部分的SQL执行逻辑，然后把以下几个方法交给子类定制化完成：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">protected abstract int doUpdate(MappedStatement ms, Object parameter) throws SQLException;</span><br><span class="line"></span><br><span class="line">protected abstract List&lt;BatchResult&gt; doFlushStatements(boolean isRollback) throws SQLException;</span><br><span class="line"></span><br><span class="line">protected abstract &lt;E&gt; List&lt;E&gt; doQuery(MappedStatement ms, Object parameter, RowBounds rowBounds,</span><br><span class="line">ResultHandler resultHandler, BoundSql boundSql) throws SQLException;</span><br></pre></td></tr></table></figure></p><p>该模板方法类有几个子类的具体实现，使用了不同的策略：简单SimpleExecutor：每执行一次update或select，就开启一个Statement对象，用完立刻关闭Statement对象。（可以是Statement或PrepareStatement对象）重用ReuseExecutor：执行update或select，以sql作为key查找Statement对象，存在就使用，不存在就创建，用完后，不关闭Statement对象，而是放置于Map&lt;String, Statement&gt;内，供下一次使用。（可以是Statement或PrepareStatement对象）批量BatchExecutor：执行update（没有select，JDBC批处理不支持select），将所有sql都添加到批处理中（addBatch()），等待统一执行（executeBatch()），它缓存了多个Statement对象，每个Statement对象都是addBatch()完毕后，等待逐一执行executeBatch()批处理的；BatchExecutor相当于维护了多个桶，每个桶里都装了很多属于自己的SQL，就像苹果蓝里装了很多苹果，番茄蓝里装了很多番茄，最后，再统一倒进仓库。（可以是Statement或PrepareStatement对象）比如在SimpleExecutor中这样实现update方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@Override</span><br><span class="line">public int doUpdate(MappedStatement ms, Object parameter) throws SQLException &#123;</span><br><span class="line">Statement stmt = null;</span><br><span class="line">try &#123;</span><br><span class="line">Configuration configuration = ms.getConfiguration();</span><br><span class="line">StatementHandler handler = configuration.newStatementHandler(this, ms, parameter, RowBounds.DEFAULT, null,</span><br><span class="line">null);</span><br><span class="line">stmt = prepareStatement(handler, ms.getStatementLog());</span><br><span class="line">return handler.update(stmt);</span><br><span class="line">&#125; finally &#123;</span><br><span class="line">closeStatement(stmt);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h6 id="七、适配器模式适配器模式-Adapter-Pattern-："><a href="#七、适配器模式适配器模式-Adapter-Pattern-：" class="headerlink" title="七、适配器模式适配器模式(Adapter Pattern) ："></a>七、适配器模式适配器模式(Adapter Pattern) ：<br></h6><p>将一个接口转换成客户希望的另一个接口，适配器模式使接口不兼容的那些类可以一起工作，其别名为包装器(Wrapper)。适配器模式既可以作为类结构型模式，也可以作为对象结构型模式。在Mybatsi的logging包中，有一个Log接口：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">public interface Log &#123;</span><br><span class="line"></span><br><span class="line">boolean isDebugEnabled();</span><br><span class="line"></span><br><span class="line">boolean isTraceEnabled();</span><br><span class="line"></span><br><span class="line">void error(String s, Throwable e);</span><br><span class="line"></span><br><span class="line">void error(String s);</span><br><span class="line"></span><br><span class="line">void debug(String s);</span><br><span class="line"></span><br><span class="line">void trace(String s);</span><br><span class="line"></span><br><span class="line">void warn(String s);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>该接口定义了Mybatis直接使用的日志方法，而Log接口具体由谁来实现呢？Mybatis提供了多种日志框架的实现，这些实现都匹配这个Log接口所定义的接口方法，最终实现了所有外部日志框架到Mybatis日志包的适配：比如对于Log4jImpl的实现来说，该实现持有了org.apache.log4j.Logger的实例，然后所有的日志方法，均委托该实例来实现。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">public class Log4jImpl implements Log &#123;</span><br><span class="line"></span><br><span class="line">private static final String FQCN = Log4jImpl.class.getName();</span><br><span class="line"></span><br><span class="line">private Logger log;</span><br><span class="line"></span><br><span class="line">public Log4jImpl(String clazz) &#123;</span><br><span class="line">log = Logger.getLogger(clazz);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public boolean isDebugEnabled() &#123;</span><br><span class="line">return log.isDebugEnabled();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public boolean isTraceEnabled() &#123;</span><br><span class="line">return log.isTraceEnabled();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void error(String s, Throwable e) &#123;</span><br><span class="line">log.log(FQCN, Level.ERROR, s, e);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void error(String s) &#123;</span><br><span class="line">log.log(FQCN, Level.ERROR, s, null);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void debug(String s) &#123;</span><br><span class="line">log.log(FQCN, Level.DEBUG, s, null);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void trace(String s) &#123;</span><br><span class="line">log.log(FQCN, Level.TRACE, s, null);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void warn(String s) &#123;</span><br><span class="line">log.log(FQCN, Level.WARN, s, null);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h6 id="八、装饰者模式装饰模式-Decorator-Pattern-："><a href="#八、装饰者模式装饰模式-Decorator-Pattern-：" class="headerlink" title="八、装饰者模式装饰模式(Decorator Pattern) ："></a>八、装饰者模式装饰模式(Decorator Pattern) ：<br></h6><p>动态地给一个对象增加一些额外的职责(Responsibility)，就增加对象功能来说，装饰模式比生成子类实现更为灵活。其别名也可以称为包装器(Wrapper)，与适配器模式的别名相同，但它们适用于不同的场合。根据翻译的不同，装饰模式也有人称之为“油漆工模式”，它是一种对象结构型模式。<br><br>在mybatis中，缓存的功能由根接口Cache（org.apache.ibatis.cache.Cache）定义。整个体系采用装饰器设计模式，数据存储和缓存的基本功能由PerpetualCache（org.apache.ibatis.cache.impl.PerpetualCache）永久缓存实现，然后通过一系列的装饰器来对PerpetualCache永久缓存进行缓存策略等方便的控制。用于装饰PerpetualCache的标准装饰器共有8个（全部在org.apache.ibatis.cache.decorators包中）：<br><br>1、FifoCache：先进先出算法，缓存回收策略<br><br>2、LoggingCache：输出缓存命中的日志信息<br><br>3、LruCache：最近最少使用算法，缓存回收策略<br><br>4、ScheduledCache：调度缓存，负责定时清空缓存<br><br>5、SerializedCache：缓存序列化和反序列化存储<br><br>6、SoftCache：基于软引用实现的缓存管理策略<br><br>7、SynchronizedCache：同步的缓存装饰器，用于防止多线程并发访问<br><br>8、WeakCache：基于弱引用实现的缓存管理策略另外，还有一个特殊的装饰器<br><br>9、TransactionalCache：事务性的缓存。<br><br>正如大多数持久层框架一样，mybatis缓存同样分为一级缓存和二级缓存一级缓存，又叫本地缓存，是PerpetualCache类型的永久缓存，保存在执行器中（BaseExecutor），而执行器又在SqlSession（DefaultSqlSession）中，所以一级缓存的生命周期与SqlSession是相同的。<br><br>二级缓存，又叫自定义缓存，实现了Cache接口的类都可以作为二级缓存，所以可配置如encache等的第三方缓存。二级缓存以namespace名称空间为其唯一标识，被保存在Configuration核心配置对象中。二级缓存对象的默认类型为PerpetualCache，如果配置的缓存是默认类型，则mybatis会根据配置自动追加一系列装饰器。<br><br>Cache对象之间的引用顺序为：SynchronizedCache–&gt;LoggingCache–&gt;SerializedCache–&gt;ScheduledCache–&gt;LruCache–&gt;PerpetualCache</p><h6 id="九、迭代器模式迭代器（Iterator）模式，又叫做游标（Cursor）模式"><a href="#九、迭代器模式迭代器（Iterator）模式，又叫做游标（Cursor）模式" class="headerlink" title="九、迭代器模式迭代器（Iterator）模式，又叫做游标（Cursor）模式:"></a>九、迭代器模式迭代器（Iterator）模式，又叫做游标（Cursor）模式:<br></h6><p>GOF给出的定义为：提供一种方法访问一个容器（container）对象中各个元素，而又不需暴露该对象的内部细节。Java的Iterator就是迭代器模式的接口，只要实现了该接口，就相当于应用了迭代器模式：比如Mybatis的PropertyTokenizer是property包中的重量级类，该类会被reflection包中其他的类频繁的引用到。这个类实现了Iterator接口，在使用时经常被用到的是Iterator接口中的hasNext这个函数。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">public class PropertyTokenizer implements Iterator&lt;PropertyTokenizer&gt; &#123;</span><br><span class="line">private String name;</span><br><span class="line">private String indexedName;</span><br><span class="line">private String index;</span><br><span class="line">private String children;</span><br><span class="line"></span><br><span class="line">public PropertyTokenizer(String fullname) &#123;</span><br><span class="line">int delim = fullname.indexOf(&apos;.&apos;);</span><br><span class="line">if (delim &gt; -1) &#123;</span><br><span class="line">name = fullname.substring(0, delim);</span><br><span class="line">children = fullname.substring(delim + 1);</span><br><span class="line">&#125; else &#123;</span><br><span class="line">name = fullname;</span><br><span class="line">children = null;</span><br><span class="line">&#125;</span><br><span class="line">indexedName = name;</span><br><span class="line">delim = name.indexOf(&apos;[&apos;);</span><br><span class="line">if (delim &gt; -1) &#123;</span><br><span class="line">index = name.substring(delim + 1, name.length() - 1);</span><br><span class="line">name = name.substring(0, delim);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public String getName() &#123;</span><br><span class="line">return name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public String getIndex() &#123;</span><br><span class="line">return index;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public String getIndexedName() &#123;</span><br><span class="line">return indexedName;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public String getChildren() &#123;</span><br><span class="line">return children;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public boolean hasNext() &#123;</span><br><span class="line">return children != null;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public PropertyTokenizer next() &#123;</span><br><span class="line">return new PropertyTokenizer(children);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@Override</span><br><span class="line">public void remove() &#123;</span><br><span class="line">throw new UnsupportedOperationException(</span><br><span class="line">&quot;Remove is not supported, as it has no meaning in the context of properties.&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>可以看到，这个类传入一个字符串到构造函数，然后提供了iterator方法对解析后的子串进行遍历，是一个很常用的方法类。</p>]]></content>
    
    <summary type="html">
    
      &lt;h5 id=&quot;有个笑话说：别管什么算法设计模式，老夫写代码就是一把梭。诚然，业务模型简单的时候，也许if-else或者switch语句要胜于复杂的设计模式应用。随着业务发展，业务模型大量耦合层级更复杂的时候，面对屎山一样的代码，看不下去了，要refactor，那么设计模式相关知识就很重要。这里记一篇通过Mybatis源码中总结到的设计模式。&quot;&gt;&lt;a href=&quot;#有个笑话说：别管什么算法设计模式，老夫写代码就是一把梭。诚然，业务模型简单的时候，也许if-else或者switch语句要胜于复杂的设计模式应用。随着业务发展，业务模型大量耦合层级更复杂的时候，面对屎山一样的代码，看不下去了，要refactor，那么设计模式相关知识就很重要。这里记一篇通过Mybatis源码中总结到的设计模式。&quot; class=&quot;headerlink&quot; title=&quot;有个笑话说：别管什么算法设计模式，老夫写代码就是一把梭。诚然，业务模型简单的时候，也许if-else或者switch语句要胜于复杂的设计模式应用。随着业务发展，业务模型大量耦合层级更复杂的时候，面对屎山一样的代码，看不下去了，要refactor，那么设计模式相关知识就很重要。这里记一篇通过Mybatis源码中总结到的设计模式。&quot;&gt;&lt;/a&gt;有个笑话说：别管什么算法设计模式，老夫写代码就是一把梭。诚然，业务模型简单的时候，也许if-else或者switch语句要胜于复杂的设计模式应用。随着业务发展，业务模型大量耦合层级更复杂的时候，面对屎山一样的代码，看不下去了，要refactor，那么设计模式相关知识就很重要。这里记一篇通过Mybatis源码中总结到的设计模式。&lt;/h5&gt;
    
    </summary>
    
    
      <category term="back-end" scheme="https://github.com/DJoeyZhang/tags/back-end/"/>
    
  </entry>
  
  <entry>
    <title>Nginx的一些配置优化</title>
    <link href="https://github.com/DJoeyZhang/archives/51e3ccae.html"/>
    <id>https://github.com/DJoeyZhang/archives/51e3ccae.html</id>
    <published>2020-01-13T09:53:00.000Z</published>
    <updated>2020-01-16T07:27:30.150Z</updated>
    
    <content type="html"><![CDATA[<h4 id="作为一个大前端开发，可能会在业务场景中遇到使用nodeJs做中间层的需求。OK，我们用node写了中间层，去调用一些基础服务或者CURD操作，这时候问题来了，你发现请求响应缓慢，于是你查看了公司服务器的负载情况，发现多台性能不同的服务器负载均衡配置不合理。于是你打开了nginx手册，试图进行一些优化～"><a href="#作为一个大前端开发，可能会在业务场景中遇到使用nodeJs做中间层的需求。OK，我们用node写了中间层，去调用一些基础服务或者CURD操作，这时候问题来了，你发现请求响应缓慢，于是你查看了公司服务器的负载情况，发现多台性能不同的服务器负载均衡配置不合理。于是你打开了nginx手册，试图进行一些优化～" class="headerlink" title="作为一个大前端开发，可能会在业务场景中遇到使用nodeJs做中间层的需求。OK，我们用node写了中间层，去调用一些基础服务或者CURD操作，这时候问题来了，你发现请求响应缓慢，于是你查看了公司服务器的负载情况，发现多台性能不同的服务器负载均衡配置不合理。于是你打开了nginx手册，试图进行一些优化～"></a>作为一个大前端开发，可能会在业务场景中遇到使用nodeJs做中间层的需求。OK，我们用node写了中间层，去调用一些基础服务或者CURD操作，这时候问题来了，你发现请求响应缓慢，于是你查看了公司服务器的负载情况，发现多台性能不同的服务器负载均衡配置不合理。于是你打开了nginx手册，试图进行一些优化～</h4><a id="more"></a><h6 id="nginx-的2种安装方式："><a href="#nginx-的2种安装方式：" class="headerlink" title="nginx 的2种安装方式："></a>nginx 的2种安装方式：<br></h6><p>1、源码包安装<br>2、yum（apt-get）安装区别为如果用yum安装的话，很方便，并且基本不报错。如果对性能要求不是很高的话，可以采用这种安装方式（比如测试环境）<br><br>如果是源码包安装的话，因为在服务器上编译的软件，会让nginx的性能相对更高一些，建议生产环境使用源码包安装</p><h6 id="一、基本配置优化（优化后配置样例，可以改后直接上生产）"><a href="#一、基本配置优化（优化后配置样例，可以改后直接上生产）" class="headerlink" title="一、基本配置优化（优化后配置样例，可以改后直接上生产）"></a>一、基本配置优化（优化后配置样例，可以改后直接上生产）<br></h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line">#头部配置</span><br><span class="line">user  nginx nginx;    #定义nginx的启动用户，不建议使用root</span><br><span class="line">worker_processes  4;　　#定位为cpu的内核数量，因为我的环境配置是4核，所以就写4。不过这值最多也就是8，8个以上也就没什么意义了，想继续提升性能只能参考下面一项配置</span><br><span class="line">worker_cpu_affinity 0001 0010 0100 1000;　　#此项配置为开启多核CPU，对你先弄提升性能有很大帮助nginx默认是不开启的,1为开启，0为关闭，因此先开启第一个倒过来写，</span><br><span class="line">第一位0001（关闭第四个、关闭第三个、关闭第二个、开启第一个）</span><br><span class="line">第二位0010（关闭第四个、关闭第三个、开启第二个、关闭第一个）</span><br><span class="line">第三位0100（关闭第四个、开启第三个、关闭第二个、关闭第一个）</span><br><span class="line">后面的依次类推，有智商的应该都可以看懂了吧？  那么如果是16核或者8核cpu，就注意为00000001、00000010、00000100，总位数与cpu核数一样。</span><br><span class="line"> </span><br><span class="line">error_log  /data/logs/nginx/error.log crit;　　　　　　#这两项基本不用我说</span><br><span class="line">pid        /usr/local/nginx/nginx.pid;</span><br><span class="line"> </span><br><span class="line">#Specifies the value for maximum file descriptors that can be opened by this process.</span><br><span class="line">worker_rlimit_nofile 65535;　　　　#这个值为nginx的worker进程打开的最大文件数，如果不配置，会读取服务器内核参数（通过ulimit -a查看），如果内核的值设置太低会让nginx报错（too many open</span><br><span class="line">file），但是在此设置后，就会读取自己配置的参数不去读取内核参数</span><br><span class="line"> </span><br><span class="line">events</span><br><span class="line">&#123;</span><br><span class="line">  use epoll;　　　　#客户端线程轮询方法、内核2.6版本以上的建议使用epoll</span><br><span class="line">  worker_connections 65535;　　#设置一个worker可以打开的最大连接数</span><br><span class="line">&#125;</span><br><span class="line">http &#123;</span><br><span class="line">        include       mime.types;</span><br><span class="line">        default_type  application/octet-stream;</span><br><span class="line"> </span><br><span class="line">        #charset  gb2312;</span><br><span class="line">        server_tokens  off;　　　　#为错误页面上的nginx版本信息，建议关闭，提升安全性</span><br><span class="line"> </span><br><span class="line">        server_names_hash_bucket_size 128;</span><br><span class="line">        client_header_buffer_size 32k;</span><br><span class="line">        large_client_header_buffers 4 32k;</span><br><span class="line">        client_max_body_size 8m;</span><br><span class="line"> </span><br><span class="line">        sendfile on;　　　　　　#开启sendfile（）函数，sendfile可以再磁盘和tcp socket之间互相copy数据。</span><br><span class="line">        tcp_nopush     on;　　#告诉nginx在数据包中发送所有头文件，而不是一个一个的发</span><br><span class="line"> </span><br><span class="line">        #keepalive_timeout 15;</span><br><span class="line">        keepalive_timeout 120;</span><br><span class="line"> </span><br><span class="line">        tcp_nodelay on;</span><br><span class="line"> </span><br><span class="line">        proxy_intercept_errors on;</span><br><span class="line">        fastcgi_intercept_errors on;</span><br><span class="line">        fastcgi_connect_timeout 1300;</span><br><span class="line">        fastcgi_send_timeout 1300;</span><br><span class="line">        fastcgi_read_timeout 1300;</span><br><span class="line">        fastcgi_buffer_size 512k;</span><br><span class="line">        fastcgi_buffers 4 512k;</span><br><span class="line">        fastcgi_busy_buffers_size 512k;</span><br><span class="line">        fastcgi_temp_file_write_size 512k;</span><br><span class="line"> </span><br><span class="line">        proxy_connect_timeout      20s;</span><br><span class="line">        proxy_send_timeout         30s;</span><br><span class="line">        proxy_read_timeout         30s;</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">        gzip on;　　　　　　　　　　　　#gzip是告诉nginx采用gzip后的数据来传输文件，会大量减少我们的发数据的量</span><br><span class="line">        gzip_min_length  1k;</span><br><span class="line">        gzip_buffers     4 16k;</span><br><span class="line">        gzip_http_version 1.0;</span><br><span class="line">        gzip_comp_level 2;</span><br><span class="line">        gzip_types       text/plain application/x-javascript text/css application/xml text/javascript application/x-httpd-php image/jpeg image/gif image/png;</span><br><span class="line">        gzip_vary on;</span><br><span class="line">        gzip_disable msie6;</span><br><span class="line">        #limit_zone  crawler  $binary_remote_addr  10m;</span><br><span class="line"> </span><br><span class="line">log_format  main  &apos;$http_host $remote_addr - $remote_user [$time_local] &quot;$request&quot; &apos;</span><br><span class="line">                  &apos;$status $body_bytes_sent &quot;$http_referer&quot; &apos;</span><br><span class="line">                  &apos;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot; &apos;</span><br><span class="line">                  &apos;$request_time $upstream_response_time&apos;;</span><br><span class="line"> </span><br><span class="line"> #proxy_temp_path和proxy_cache_path指定的路径必须在同一分区,因为它们之间是硬链接的关系</span><br><span class="line"> #proxy_temp_path /var/cache/nginx/proxy_temp_dir;</span><br><span class="line"> #设置Web缓存区名称为cache_one，内存缓存空间大小为200MB，1天没有被访问的内容自动清除，硬盘缓存空间大小为30GB。</span><br><span class="line"> #proxy_cache_path /var/cache/nginx/proxy_cache_dir levels=1:2 keys_zone=cache_one:200m inactive=1d max_size=30g;</span><br><span class="line"> </span><br><span class="line">        include /usr/local/nginx/conf/vhosts/*.conf;</span><br><span class="line"> </span><br><span class="line">        error_page  404   = https://www.niu.com/404/;</span><br><span class="line">        #error_page   500 502 503 504 = http://service.niu.com/alien/;</span><br><span class="line"> </span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p> 如果是高并发架构，需要在nginx的服务器上添加如下的内核参数<br>这些参数追加到/etc/sysctl.conf,然后执行sysctl -p 生效。<br></p><p> #每个网络接口接收数据包速度比内核处理速度快的时候，允许发送队列数目数据包的最大数net.core.netdev_max_backlog = 262144<br></p><p> #调节系统同时发起的tcp连接数net.core.somaxconn = 262144<br></p><p> #该参数用于设定系统中最多允许存在多少TCP套接字不被关联到任何一个用户文件句柄上，主要目的为防止Ddos攻击net.ipv4.tcp_max_orphans = 262144<br></p><p> #该参数用于记录尚未收到客户端确认信息的连接请求的最大值net.ipv4.tcp_max_syn_backlog = 262144<br></p><p> #nginx服务上建议关闭（既为0）net.ipv4.tcp_timestamps = 0<br></p><p> #该参数用于设置内核放弃TCP连接之前向客户端发送SYN+ACK包的数量，为了建立对端的连接服务，服务器和客户端需要进行三次握手，第二次握手期间，内核需要发送SYN并附带一个回应前一个SYN的ACK，这个参数主要影响这个过程，一般赋予值为1，即内核放弃连接之前发送一次SYN＋ACK包。net.ipv4.tcp_synack_retries = 1net.ipv4.tcp_syn_retries = 1<br></p><h6 id="二、nginx配置lua，添加接口返回值，方便开发debug，"><a href="#二、nginx配置lua，添加接口返回值，方便开发debug，" class="headerlink" title="二、nginx配置lua，添加接口返回值，方便开发debug，"></a>二、nginx配置lua，添加接口返回值，方便开发debug，<br></h6><h6 id="三、nginx配置https"><a href="#三、nginx配置https" class="headerlink" title="三、nginx配置https"></a>三、nginx配置https</h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">#server端基本配置&lt;br&gt;server &#123;</span><br><span class="line">    listen 80;</span><br><span class="line">    listen 443 ssl spdy;</span><br><span class="line">    server_name io.123.com;</span><br><span class="line">    include      ssl/io.com;　　　　　　#注意看下一个文件</span><br><span class="line">    location / &#123;</span><br><span class="line">        proxy_pass http://lb_io;</span><br><span class="line">        if ($scheme = http ) &#123;</span><br><span class="line">        return 301 https://$host$request_uri;　　　　#此项配置为转换为https的基本配置</span><br><span class="line">        &#125;</span><br><span class="line">        proxy_set_header X-Real-IP $remote_addr;</span><br><span class="line">        proxy_set_header Host $host;</span><br><span class="line">        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;</span><br><span class="line">        proxy_set_header X-Forwarded-Proto $scheme;</span><br><span class="line"> </span><br><span class="line">        proxy_http_version 1.1;</span><br><span class="line">        proxy_set_header Upgrade $http_upgrade;</span><br><span class="line">        proxy_set_header Connection &quot;upgrade&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    access_log /data/logs/nginx/access/niuaero.log main;</span><br><span class="line">&#125;</span><br><span class="line">　　</span><br><span class="line"></span><br><span class="line">ssl_certificate      ssl/ca/io.com.pem;　　　　#这个为购买的https证书，供应商会生成</span><br><span class="line">ssl_certificate_key  ssl/ca/io.com.key;</span><br><span class="line">ssl_session_timeout  5m;</span><br><span class="line">ssl_protocols  TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line">#启用TLS1.1、TLS1.2要求OpenSSL1.0.1及以上版本，若您的OpenSSL版本低于要求，请使用 ssl_protocols TLSv1;</span><br><span class="line">ssl_ciphers  HIGH:!RC4:!MD5:!aNULL:!eNULL:!NULL:!DH:!EDH:!EXP:+MEDIUM;</span><br><span class="line">ssl_prefer_server_ciphers   on;</span><br></pre></td></tr></table></figure><h6 id="四、nginx配置反爬虫"><a href="#四、nginx配置反爬虫" class="headerlink" title="四、nginx配置反爬虫"></a>四、nginx配置反爬虫<br></h6><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">#以下内容添加nginx虚拟主机配置里，proxypass之后&lt;br&gt;&lt;br&gt;if ($http_user_agent ~* (Scrapy|Curl|HttpClient)) &#123; </span><br><span class="line">     return 403; </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line">#禁止指定UA及UA为空的访问 </span><br><span class="line">if ($http_user_agent ~ &quot;WinHttp|WebZIP|FetchURL|node-superagent|java/|FeedDemon|Jullo|JikeSpider|Indy Library|Alexa Toolbar|AskTbFXTV|AhrefsBot|CrawlDaddy|Java|Feedly|Apache-HttpAsyncClient|UniversalFeedParser|ApacheBench|Microsoft URL Control|Swiftbot|ZmEu|oBot|jaunty|Python-urllib|lightDeckReports Bot|YYSpider|DigExt|HttpClient|MJ12bot|heritrix|EasouSpider|Ezooms|BOT/0.1|YandexBot|FlightDeckReports|Linguee Bot|^$&quot; ) &#123; </span><br><span class="line">     return 403;              </span><br><span class="line">&#125; </span><br><span class="line"> </span><br><span class="line">#禁止非GET|HEAD|POST方式的抓取 </span><br><span class="line">if ($request_method !~ ^(GET|HEAD|POST)$) &#123; </span><br><span class="line">    return 403; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;作为一个大前端开发，可能会在业务场景中遇到使用nodeJs做中间层的需求。OK，我们用node写了中间层，去调用一些基础服务或者CURD操作，这时候问题来了，你发现请求响应缓慢，于是你查看了公司服务器的负载情况，发现多台性能不同的服务器负载均衡配置不合理。于是你打开了nginx手册，试图进行一些优化～&quot;&gt;&lt;a href=&quot;#作为一个大前端开发，可能会在业务场景中遇到使用nodeJs做中间层的需求。OK，我们用node写了中间层，去调用一些基础服务或者CURD操作，这时候问题来了，你发现请求响应缓慢，于是你查看了公司服务器的负载情况，发现多台性能不同的服务器负载均衡配置不合理。于是你打开了nginx手册，试图进行一些优化～&quot; class=&quot;headerlink&quot; title=&quot;作为一个大前端开发，可能会在业务场景中遇到使用nodeJs做中间层的需求。OK，我们用node写了中间层，去调用一些基础服务或者CURD操作，这时候问题来了，你发现请求响应缓慢，于是你查看了公司服务器的负载情况，发现多台性能不同的服务器负载均衡配置不合理。于是你打开了nginx手册，试图进行一些优化～&quot;&gt;&lt;/a&gt;作为一个大前端开发，可能会在业务场景中遇到使用nodeJs做中间层的需求。OK，我们用node写了中间层，去调用一些基础服务或者CURD操作，这时候问题来了，你发现请求响应缓慢，于是你查看了公司服务器的负载情况，发现多台性能不同的服务器负载均衡配置不合理。于是你打开了nginx手册，试图进行一些优化～&lt;/h4&gt;
    
    </summary>
    
    
      <category term="back-end" scheme="https://github.com/DJoeyZhang/tags/back-end/"/>
    
  </entry>
  
  <entry>
    <title>React-Native开发之VSCode配置规范</title>
    <link href="https://github.com/DJoeyZhang/archives/d0170db3.html"/>
    <id>https://github.com/DJoeyZhang/archives/d0170db3.html</id>
    <published>2019-11-04T02:39:00.000Z</published>
    <updated>2020-01-14T08:56:01.016Z</updated>
    
    <content type="html"><![CDATA[<h4 id="代码风格及检查"><a href="#代码风格及检查" class="headerlink" title="代码风格及检查"></a>代码风格及检查</h4><p>代码风格检查目前一致认为用eslint比较好，并且目前ReactNative项目的开发基本都使用VSCode，因此进行代码规则检查使用VSCode的eslint插件。<br><a id="more"></a></p><h5 id="关于插件的安装及配置文件的生成（以下基于VSCode）"><a href="#关于插件的安装及配置文件的生成（以下基于VSCode）" class="headerlink" title="关于插件的安装及配置文件的生成（以下基于VSCode）"></a>关于插件的安装及配置文件的生成（以下基于VSCode）</h5><pre><code>1、首先是插件的安装，打开VSCode的扩展商店搜索eslint，找到以后下载并安装，重启VSCode。2、生成配置文件，使用终端执行npm install eslint (如果是全局安装加参数-g，如果是本地在项目根目录执行命令)，安装成功后eslint --init初始化eslint配置文件3、基础规则库的安装，目前使用的基础规则是eslint推荐规则及react推荐规则，因此需要npm install eslint-plugin-react4、除此之外还需要npm install babel-eslint</code></pre><p>最后，使用统一的配置文件内容覆盖自己项目中的（文件名：.eslintrc.js），目前规则还不算完整需要大家来填充修改</p><h5 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h5><p>eslintrc.js</p><h5 id="代码格式化篇"><a href="#代码格式化篇" class="headerlink" title="代码格式化篇"></a>代码格式化篇</h5><p>prettier目前是功能比较强的代码格式化工具，可以根据eslint规则格式化代码（有一些规则可能不生效，需要单独补充）</p><p>关于插件的安装及规则设置</p><pre><code>1、首先是插件的安装，打开VSCode的扩展商店搜索prettier，找到以后下载并安装，重启VSCode。2、在usersetting 里面增加设置</code></pre><p>“prettier.eslintIntegration”: true, //让prettier使用eslint的代码格式进行校验<br>“editor.formatOnSave”: true,<br>“javascript.format.enable”: false<br>“editor.tabSize”: 4,<br>“editor.detectIndentation”: false,</p><p>注意事项：<br>公共文件，最好不要做代码格式化，容易在代码merge时引起许多冲突</p><p>如果需求格式化，约定在项目提测前，某个人格式化，然后其他人及时同步一下</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;代码风格及检查&quot;&gt;&lt;a href=&quot;#代码风格及检查&quot; class=&quot;headerlink&quot; title=&quot;代码风格及检查&quot;&gt;&lt;/a&gt;代码风格及检查&lt;/h4&gt;&lt;p&gt;代码风格检查目前一致认为用eslint比较好，并且目前ReactNative项目的开发基本都使用VSCode，因此进行代码规则检查使用VSCode的eslint插件。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="React-native" scheme="https://github.com/DJoeyZhang/tags/React-native/"/>
    
  </entry>
  
  <entry>
    <title>Debounce函数及lodash库的一些思考</title>
    <link href="https://github.com/DJoeyZhang/archives/20cd7dd6.html"/>
    <id>https://github.com/DJoeyZhang/archives/20cd7dd6.html</id>
    <published>2019-01-21T06:05:00.000Z</published>
    <updated>2020-01-14T08:56:16.911Z</updated>
    
    <content type="html"><![CDATA[<p>hybrid-native开发或者reat-native开发时，不可避免涉及到js脚本编写。对于大前端来说，对于es6/es7的语法熟悉是必备素质。这里介绍一个前端常用的工具库lodash。<br><a id="more"></a></p><h4 id="遇到的问题"><a href="#遇到的问题" class="headerlink" title="遇到的问题"></a>遇到的问题</h4><p>今天在优化大搜索页面时碰到一个问题，feedback返回用户反馈搜索页面卡顿。先定位到原先的代码：是在 &lt; TextInput &gt; 的onchange回调中，请求suggest接口返回模糊搜索结果。但是在IOS设备上会有一个问题：键盘输入拼音时系统会把未输入完的结果录到input组建中，导致onchange回调多次调用，suggest接口频繁请求，hint内容不断刷新，造成页面卡顿的同时，也增加了接口的负担。</p><h4 id="优化点"><a href="#优化点" class="headerlink" title="优化点"></a>优化点</h4><p>经过分析，我认为用户使用模糊搜索具备 <a href="http://f.dataguru.cn/spark-888363-1-1.html" target="_blank" rel="noopener">幂等性</a> .即在一段时间内用户输入的key word应返回相同的suggest。不应频繁调用接口。<br>基于以上思想，很自然想到setTimeout()函数，用户输入停止后设置一个延时再请求网络,但是直接在回调里setTimeout这个做法十分hardcode。于是逛了一下万能的gayHub,发现了一个不错的解决方案:使用debounce函数去除抖动。</p><h4 id="lodash介入"><a href="#lodash介入" class="headerlink" title="lodash介入"></a>lodash介入</h4><p>这里的debounce函数属于鼎鼎大名的lodash库(<a href="https://github.com/lodash/lodash">https://github.com/lodash/lodash</a>)<br><a href="https://www.lodashjs.com/docs/4.17.5.html#debounce" target="_blank" rel="noopener">debounce函数的官方文档</a></p><p><a href="https://lodash.com/docs/4.17.5" target="_blank" rel="noopener">lodash官方文档</a><br><a href="http://lodash.think2011.net/keys" target="_blank" rel="noopener">lodash中文文档</a></p><h4 id="debounce-与-throttle"><a href="#debounce-与-throttle" class="headerlink" title="debounce 与 throttle"></a>debounce 与 throttle</h4><p>debounce(防抖)：当调用函数n秒后，才会执行该动作，若在这n秒内又调用该函数则将取消前一次并重新计算执行时间，举个简单的例子，我们要根据用户输入做suggest，每当用户按下键盘的时候都可以取消前一次，并且只关心最后一次输入的时间就行了。</p><p>throttle(节流)：将一个函数的调用频率限制在一定阈值内，例如 1s 内一个函数不能被调用两次。<br>这里拿出debounce的源码解析一下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line">function debounce(func, wait, options) &#123;</span><br><span class="line">    let lastArgs,</span><br><span class="line">        lastThis,</span><br><span class="line">        maxWait,</span><br><span class="line">        result,</span><br><span class="line">        timerId,</span><br><span class="line">        lastCallTime</span><br><span class="line"></span><br><span class="line">    // 参数初始化</span><br><span class="line">    let lastInvokeTime = 0 // func 上一次执行的时间</span><br><span class="line">    let leading = false</span><br><span class="line">    let maxing = false</span><br><span class="line">    let trailing = true</span><br><span class="line"></span><br><span class="line">    // 基本的类型判断和处理</span><br><span class="line">    if (typeof func != &apos;function&apos;) &#123;</span><br><span class="line">        throw new TypeError(&apos;Expected a function&apos;)</span><br><span class="line">    &#125;</span><br><span class="line">    wait = +wait || 0</span><br><span class="line">    if (isObject(options)) &#123;</span><br><span class="line">        // 对配置的一些初始化</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function invokeFunc(time) &#123;</span><br><span class="line">        const args = lastArgs</span><br><span class="line">        const thisArg = lastThis</span><br><span class="line"></span><br><span class="line">        lastArgs = lastThis = undefined</span><br><span class="line">        lastInvokeTime = time</span><br><span class="line">        result = func.apply(thisArg, args)</span><br><span class="line">        return result</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function leadingEdge(time) &#123;</span><br><span class="line">        // Reset any `maxWait` timer.</span><br><span class="line">        lastInvokeTime = time</span><br><span class="line">        // 为 trailing edge 触发函数调用设定定时器</span><br><span class="line">        timerId = setTimeout(timerExpired, wait)</span><br><span class="line">        // leading = true 执行函数</span><br><span class="line">        return leading ? invokeFunc(time) : result</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   function remainingWait(time) &#123;</span><br><span class="line">        const timeSinceLastCall = time - lastCallTime // 距离上次debounced函数被调用的时间</span><br><span class="line">        const timeSinceLastInvoke = time - lastInvokeTime // 距离上次函数被执行的时间</span><br><span class="line">        const timeWaiting = wait - timeSinceLastCall // 用 wait 减去 timeSinceLastCall 计算出下一次trailing的位置</span><br><span class="line"></span><br><span class="line">        // 两种情况</span><br><span class="line">        // 有maxing:比较出下一次maxing和下一次trailing的最小值，作为下一次函数要执行的时间</span><br><span class="line">        // 无maxing：在下一次trailing时执行 timerExpired</span><br><span class="line">        return maxing</span><br><span class="line">            ? Math.min(timeWaiting, maxWait - timeSinceLastInvoke)</span><br><span class="line">            : timeWaiting</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 根据时间判断 func 能否被执行</span><br><span class="line">    function shouldInvoke(time) &#123;</span><br><span class="line">        const timeSinceLastCall = time - lastCallTime</span><br><span class="line">        const timeSinceLastInvoke = time - lastInvokeTime</span><br><span class="line"></span><br><span class="line">        // 几种满足条件的情况</span><br><span class="line">        return (lastCallTime === undefined //首次</span><br><span class="line">            || (timeSinceLastCall &gt;= wait) // 距离上次被调用已经超过 wait</span><br><span class="line">            || (timeSinceLastCall &lt; 0) //系统时间倒退</span><br><span class="line">            || (maxing &amp;&amp; timeSinceLastInvoke &gt;= maxWait)) //超过最大等待时间</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function timerExpired() &#123;</span><br><span class="line">        const time = Date.now()</span><br><span class="line">        // 在 trailing edge 且时间符合条件时，调用 trailingEdge函数，否则重启定时器</span><br><span class="line">        if (shouldInvoke(time)) &#123;</span><br><span class="line">            return trailingEdge(time)</span><br><span class="line">        &#125;</span><br><span class="line">        // 重启定时器，保证下一次时延的末尾触发</span><br><span class="line">        timerId = setTimeout(timerExpired, remainingWait(time))</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function trailingEdge(time) &#123;</span><br><span class="line">        timerId = undefined</span><br><span class="line"></span><br><span class="line">        // 有lastArgs才执行，意味着只有 func 已经被 debounced 过一次以后才会在 trailing edge 执行</span><br><span class="line">        if (trailing &amp;&amp; lastArgs) &#123;</span><br><span class="line">            return invokeFunc(time)</span><br><span class="line">        &#125;</span><br><span class="line">        // 每次 trailingEdge 都会清除 lastArgs 和 lastThis，目的是避免最后一次函数被执行了两次</span><br><span class="line">        // 举个例子：最后一次函数执行的时候，可能恰巧是前一次的 trailing edge，函数被调用，而这个函数又需要在自己时延的 trailing edge 触发，导致触发多次</span><br><span class="line">        lastArgs = lastThis = undefined</span><br><span class="line">        return result</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function cancel() &#123;&#125;</span><br><span class="line"></span><br><span class="line">    function flush() &#123;&#125;</span><br><span class="line"></span><br><span class="line">    function pending() &#123;&#125;</span><br><span class="line"></span><br><span class="line">    function debounced(...args) &#123;</span><br><span class="line">        const time = Date.now()</span><br><span class="line">        const isInvoking = shouldInvoke(time) //是否满足时间条件</span><br><span class="line"></span><br><span class="line">        lastArgs = args</span><br><span class="line">        lastThis = this</span><br><span class="line">        lastCallTime = time  //函数被调用的时间</span><br><span class="line"></span><br><span class="line">        if (isInvoking) &#123;</span><br><span class="line">            if (timerId === undefined) &#123; // 无timerId的情况有两种：1.首次调用 2.trailingEdge执行过函数</span><br><span class="line">                return leadingEdge(lastCallTime)</span><br><span class="line">            &#125;</span><br><span class="line">            if (maxing) &#123;</span><br><span class="line">                // Handle invocations in a tight loop.</span><br><span class="line">                timerId = setTimeout(timerExpired, wait)</span><br><span class="line">                return invokeFunc(lastCallTime)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        // 负责一种case：trailing 为 true 的情况下，在前一个 wait 的 trailingEdge 已经执行了函数；</span><br><span class="line">        // 而这次函数被调用时 shouldInvoke 不满足条件，因此要设置定时器，在本次的 trailingEdge 保证函数被执行</span><br><span class="line">        if (timerId === undefined) &#123;</span><br><span class="line">            timerId = setTimeout(timerExpired, wait)</span><br><span class="line">        &#125;</span><br><span class="line">        return result</span><br><span class="line">    &#125;</span><br><span class="line">    debounced.cancel = cancel</span><br><span class="line">    debounced.flush = flush</span><br><span class="line">    debounced.pending = pending</span><br><span class="line">    return debounced</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>首次进入函数时因为 lastCallTime === undefined 并且 timerId === undefined，所以会执行 leadingEdge，如果此时 leading 为 true 的话，就会执行 func。同时，这里会设置一个定时器，在等待 wait(s) 后会执行 timerExpired，timerExpired 的主要作用就是触发 trailing。</p><p>如果在还未到 wait 的时候就再次调用了函数的话,会更新 lastCallTime，并且因为此时 isInvoking 不满足条件，所以这次什么也不会执行。</p><p>时间到达 wait 时，就会执行我们一开始设定的定时器timerExpired，此时因为time-lastCallTime &lt; wait，所以不会执行 trailingEdge。</p><p>这时又会新增一个定时器，下一次执行的时间是 remainingWait，这里会根据是否有 maxwait 来作区分：</p><p>如果没有 maxwait，定时器的时间是 wait - timeSinceLastCall，保证下一次 trailing 的执行。</p><p>如果有 maxing，会比较出下一次 maxing 和下一次 trailing 的最小值，作为下一次函数要执行的时间。</p><p>最后，如果不再有函数调用，就会在定时器结束时执行 trailingEdge。</p><h4 id="lodash其他常用函数："><a href="#lodash其他常用函数：" class="headerlink" title="lodash其他常用函数："></a>lodash其他常用函数：</h4><p><strong>遍历对象类型：</strong><br>_.forEach(obj, (value, key) =&gt; { console.log(value) })</p><p><strong>遍历和过滤的快捷方式：</strong><br>从一组对象中摘取出某个属性的值：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">let arr = [&#123; n: 1 &#125;, &#123; n: 2 &#125;]</span><br><span class="line">// ES6</span><br><span class="line">arr.map((obj) =&gt; obj.n)</span><br><span class="line">// Lodash</span><br><span class="line">_.map(arr, &apos;n&apos;)</span><br></pre></td></tr></table></figure></p><p>当对象类型的嵌套层级很多时，Lodash 的快捷方式就更实用了：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">let arr = [</span><br><span class="line">  &#123; a: [ &#123; n: 1 &#125; ]&#125;,</span><br><span class="line">  &#123; b: [ &#123; n: 1 &#125; ]&#125;</span><br><span class="line">]</span><br><span class="line">// ES6</span><br><span class="line">arr.map((obj) =&gt; obj.a[0].n) // TypeError: 属性 &apos;a&apos; 在 arr[1] 中未定义</span><br><span class="line">// Lodash</span><br><span class="line">_.map(arr, &apos;a[0].n&apos;) // =&gt; [1, undefined]</span><br></pre></td></tr></table></figure></p><p>可以看到，Lodash 的快捷方式还对 null 值做了容错处理。此外还有过滤快捷方式，以下是从 Lodash 官方文档中摘取的示例代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">let users = [</span><br><span class="line">  &#123; &apos;user&apos;: &apos;barney&apos;, &apos;age&apos;: 36, &apos;active&apos;: true &#125;,</span><br><span class="line">  &#123; &apos;user&apos;: &apos;fred&apos;,   &apos;age&apos;: 40, &apos;active&apos;: false &#125;</span><br><span class="line">];</span><br><span class="line">// ES6</span><br><span class="line">users.filter((o) =&gt; o.active)</span><br><span class="line">// Lodash</span><br><span class="line">_.filter(users, &apos;active&apos;)</span><br><span class="line">_.filter(users, [&apos;active&apos;, true])</span><br><span class="line">_.filter(users, &#123;&apos;active&apos;: true, &apos;age&apos;: 36&#125;)</span><br></pre></td></tr></table></figure></p><p><strong> 链式调用和惰性求值:</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">et lines = `</span><br><span class="line">an apple orange the grape</span><br><span class="line">banana an apple melon</span><br><span class="line">an orange banana apple</span><br><span class="line">`.split(&apos;\n&apos;)</span><br><span class="line"></span><br><span class="line">_.chain(lines)</span><br><span class="line">  .flatMap(line =&gt; line.split(/\s+/))</span><br><span class="line">  .filter(word =&gt; word.length &gt; 3)</span><br><span class="line">  .groupBy(_.identity)</span><br><span class="line">  .mapValues(_.size)</span><br><span class="line">  .forEach((count, word) =&gt; &#123; console.log(word, count) &#125;)</span><br><span class="line"></span><br><span class="line">// apple 3</span><br><span class="line">// orange 2</span><br><span class="line">// grape 1</span><br><span class="line">// banana 2</span><br><span class="line">// melon 1</span><br></pre></td></tr></table></figure></p><p><strong>解构赋值和箭头函数:</strong><br>ES6 引入了解构赋值、箭头函数等新的语言特性，可以用来替换 Lodash：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">// Lodash</span><br><span class="line">_.head([1, 2, 3]) // =&gt; 1</span><br><span class="line">_.tail([1, 2, 3]) // =&gt; [2, 3]</span><br><span class="line">// ES6 解构赋值（destructuring syntax）</span><br><span class="line">const [head, ...tail] = [1, 2, 3]</span><br><span class="line"></span><br><span class="line">// Lodash</span><br><span class="line">let say = _.rest((who, fruits) =&gt; who + &apos; likes &apos; + fruits.join(&apos;,&apos;))</span><br><span class="line">say(&apos;Jerry&apos;, &apos;apple&apos;, &apos;grape&apos;)</span><br><span class="line">// ES6 spread syntax</span><br><span class="line">say = (who, ...fruits) =&gt; who + &apos; likes &apos; + fruits.join(&apos;,&apos;)</span><br><span class="line">say(&apos;Mary&apos;, &apos;banana&apos;, &apos;orange&apos;)</span><br><span class="line"></span><br><span class="line">// Lodash</span><br><span class="line">_.constant(1)() // =&gt; 1</span><br><span class="line">_.identity(2) // =&gt; 2</span><br><span class="line">// ES6</span><br><span class="line">(x =&gt; (() =&gt; x))(1)() // =&gt; 1</span><br><span class="line">(x =&gt; x)(2) // =&gt; 2</span><br><span class="line"></span><br><span class="line">// 偏应用（Partial application）</span><br><span class="line">let add = (a, b) =&gt; a + b</span><br><span class="line">// Lodash</span><br><span class="line">let add1 = _.partial(add, 1)</span><br><span class="line">// ES6</span><br><span class="line">add1 = b =&gt; add(1, b)</span><br><span class="line"></span><br><span class="line">// 柯里化（Curry）</span><br><span class="line">// Lodash</span><br><span class="line">let curriedAdd = _.curry(add)</span><br><span class="line">let add1 = curriedAdd(1)</span><br><span class="line">// ES6</span><br><span class="line">curriedAdd = a =&gt; b =&gt; a + b</span><br><span class="line">add1 = curriedAdd(1)</span><br></pre></td></tr></table></figure></p><h4 id="一些参考信息："><a href="#一些参考信息：" class="headerlink" title="一些参考信息："></a>一些参考信息：</h4><p><a href="https://www.sitepoint.com/lodash-features-replace-es6/" target="_blank" rel="noopener">10 Lodash Features You Can Replace with ES6</a><br><a href="https://derickbailey.com/2016/09/12/does-es6-mean-the-end-of-underscore-lodash/" target="_blank" rel="noopener">Does ES6 Mean The End Of Underscore / Lodash?</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;hybrid-native开发或者reat-native开发时，不可避免涉及到js脚本编写。对于大前端来说，对于es6/es7的语法熟悉是必备素质。这里介绍一个前端常用的工具库lodash。&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="front-end" scheme="https://github.com/DJoeyZhang/tags/front-end/"/>
    
  </entry>
  
</feed>
